(()=>{"use strict";var e=function(n,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},e(n,t)};function n(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function t(e,n){var t,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(c){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(u=0)),u;)try{if(t=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return u.label++,{value:a[1],done:!1};case 5:u.label++,r=a[1],a=[0];continue;case 7:a=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){u=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){u.label=a[1];break}if(6===a[0]&&u.label<o[1]){u.label=o[1],o=a;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(a);break}o[2]&&u.ops.pop(),u.trys.pop();continue}a=n.call(e,u)}catch(e){a=[6,e],r=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}function r(e){var n="function"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,o,i=t.call(e),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u}function i(e,n,t){if(t||2===arguments.length)for(var r,o=0,i=n.length;o<i;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return e.concat(r||Array.prototype.slice.call(n))}function u(e){return this instanceof u?(this.v=e,this):new u(e)}function a(e){return"function"==typeof e}function c(e){var n=e((function(e){Error.call(e),e.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var l=c((function(e){return function(n){e(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(e,n){return n+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}));function s(e,n){if(e){var t=e.indexOf(n);0<=t&&e.splice(t,1)}}var d=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,n,t,u,c;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var d=r(s),p=d.next();!p.done;p=d.next())p.value.remove(this)}catch(n){e={error:n}}finally{try{p&&!p.done&&(n=d.return)&&n.call(d)}finally{if(e)throw e.error}}else s.remove(this);var f=this.initialTeardown;if(a(f))try{f()}catch(e){c=e instanceof l?e.errors:[e]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var m=r(v),y=m.next();!y.done;y=m.next()){var b=y.value;try{h(b)}catch(e){c=null!=c?c:[],e instanceof l?c=i(i([],o(c)),o(e.errors)):c.push(e)}}}catch(e){t={error:e}}finally{try{y&&!y.done&&(u=m.return)&&u.call(m)}finally{if(t)throw t.error}}}if(c)throw new l(c)}},e.prototype.add=function(n){var t;if(n&&n!==this)if(this.closed)h(n);else{if(n instanceof e){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(t=this._finalizers)&&void 0!==t?t:[]).push(n)}},e.prototype._hasParent=function(e){var n=this._parentage;return n===e||Array.isArray(n)&&n.includes(e)},e.prototype._addParent=function(e){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(e),n):n?[n,e]:e},e.prototype._removeParent=function(e){var n=this._parentage;n===e?this._parentage=null:Array.isArray(n)&&s(n,e)},e.prototype.remove=function(n){var t=this._finalizers;t&&s(t,n),n instanceof e&&n._removeParent(this)},e.EMPTY=((n=new e).closed=!0,n),e;var n}(),p=d.EMPTY;function f(e){return e instanceof d||e&&"closed"in e&&a(e.remove)&&a(e.add)&&a(e.unsubscribe)}function h(e){a(e)?e():e.unsubscribe()}var v={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},m={setTimeout:function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var u=m.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([e,n],o(t))):setTimeout.apply(void 0,i([e,n],o(t)))},clearTimeout:function(e){var n=m.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(e)},delegate:void 0};function y(e){m.setTimeout((function(){var n=v.onUnhandledError;if(!n)throw e;n(e)}))}function b(){}var w=S("C",void 0,void 0);function S(e,n,t){return{kind:e,value:n,error:t}}var g=null;function E(e){if(v.useDeprecatedSynchronousErrorHandling){var n=!g;if(n&&(g={errorThrown:!1,error:null}),e(),n){var t=g,r=t.errorThrown,o=t.error;if(g=null,r)throw o}}else e()}var C=function(e){function t(n){var t=e.call(this)||this;return t.isStopped=!1,n?(t.destination=n,f(n)&&n.add(t)):t.destination=x,t}return n(t,e),t.create=function(e,n,t){return new _(e,n,t)},t.prototype.next=function(e){this.isStopped?O(function(e){return S("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?O(S("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?O(w,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(d),L=Function.prototype.bind;function I(e,n){return L.call(e,n)}var k=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var n=this.partialObserver;if(n.next)try{n.next(e)}catch(e){T(e)}},e.prototype.error=function(e){var n=this.partialObserver;if(n.error)try{n.error(e)}catch(e){T(e)}else T(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){T(e)}},e}(),_=function(e){function t(n,t,r){var o,i,u=e.call(this)||this;return a(n)||!n?o={next:null!=n?n:void 0,error:null!=t?t:void 0,complete:null!=r?r:void 0}:u&&v.useDeprecatedNextContext?((i=Object.create(n)).unsubscribe=function(){return u.unsubscribe()},o={next:n.next&&I(n.next,i),error:n.error&&I(n.error,i),complete:n.complete&&I(n.complete,i)}):o=n,u.destination=new k(o),u}return n(t,e),t}(C);function T(e){var n;v.useDeprecatedSynchronousErrorHandling?(n=e,v.useDeprecatedSynchronousErrorHandling&&g&&(g.errorThrown=!0,g.error=n)):y(e)}function O(e,n){var t=v.onStoppedNotification;t&&m.setTimeout((function(){return t(e,n)}))}var x={closed:!0,next:b,error:function(e){throw e},complete:b},j="function"==typeof Symbol&&Symbol.observable||"@@observable";function M(e){return e}var P=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(n){var t=new e;return t.source=this,t.operator=n,t},e.prototype.subscribe=function(e,n,t){var r,o=this,i=(r=e)&&r instanceof C||function(e){return e&&a(e.next)&&a(e.error)&&a(e.complete)}(r)&&f(r)?e:new _(e,n,t);return E((function(){var e=o,n=e.operator,t=e.source;i.add(n?n.call(i,t):t?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(n){e.error(n)}},e.prototype.forEach=function(e,n){var t=this;return new(n=A(n))((function(n,r){var o=new _({next:function(n){try{e(n)}catch(e){r(e),o.unsubscribe()}},error:r,complete:n});t.subscribe(o)}))},e.prototype._subscribe=function(e){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(e)},e.prototype[j]=function(){return this},e.prototype.pipe=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return(0===(t=e).length?M:1===t.length?t[0]:function(e){return t.reduce((function(e,n){return n(e)}),e)})(this);var t},e.prototype.toPromise=function(e){var n=this;return new(e=A(e))((function(e,t){var r;n.subscribe((function(e){return r=e}),(function(e){return t(e)}),(function(){return e(r)}))}))},e.create=function(n){return new e(n)},e}();function A(e){var n;return null!==(n=null!=e?e:v.Promise)&&void 0!==n?n:Promise}var q=c((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),H=function(e){function t(){var n=e.call(this)||this;return n.closed=!1,n.currentObservers=null,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return n(t,e),t.prototype.lift=function(e){var n=new K(this,this);return n.operator=e,n},t.prototype._throwIfClosed=function(){if(this.closed)throw new q},t.prototype.next=function(e){var n=this;E((function(){var t,o;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var i=r(n.currentObservers),u=i.next();!u.done;u=i.next())u.value.next(e)}catch(e){t={error:e}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(t)throw t.error}}}}))},t.prototype.error=function(e){var n=this;E((function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=e;for(var t=n.observers;t.length;)t.shift().error(e)}}))},t.prototype.complete=function(){var e=this;E((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var n=e.observers;n.length;)n.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(n){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,n)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var n=this,t=this,r=t.hasError,o=t.isStopped,i=t.observers;return r||o?p:(this.currentObservers=null,i.push(e),new d((function(){n.currentObservers=null,s(i,e)})))},t.prototype._checkFinalizedStatuses=function(e){var n=this,t=n.hasError,r=n.thrownError,o=n.isStopped;t?e.error(r):o&&e.complete()},t.prototype.asObservable=function(){var e=new P;return e.source=this,e},t.create=function(e,n){return new K(e,n)},t}(P),K=function(e){function t(n,t){var r=e.call(this)||this;return r.destination=n,r.source=t,r}return n(t,e),t.prototype.next=function(e){var n,t;null===(t=null===(n=this.destination)||void 0===n?void 0:n.next)||void 0===t||t.call(n,e)},t.prototype.error=function(e){var n,t;null===(t=null===(n=this.destination)||void 0===n?void 0:n.error)||void 0===t||t.call(n,e)},t.prototype.complete=function(){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===n||n.call(e)},t.prototype._subscribe=function(e){var n,t;return null!==(t=null===(n=this.source)||void 0===n?void 0:n.subscribe(e))&&void 0!==t?t:p},t}(H),N=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function R(e){return a(null==e?void 0:e.then)}function U(e){return a(e[j])}function J(e){return Symbol.asyncIterator&&a(null==e?void 0:e[Symbol.asyncIterator])}function z(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var D="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function V(e){return a(null==e?void 0:e[D])}function B(e){return function(e,n,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=t.apply(e,n||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(n){return new Promise((function(t,r){i.push([e,n,t,r])>1||c(e,n)}))})}function c(e,n){try{(t=o[e](n)).value instanceof u?Promise.resolve(t.value.v).then(l,s):d(i[0][2],t)}catch(e){d(i[0][3],e)}var t}function l(e){c("next",e)}function s(e){c("throw",e)}function d(e,n){e(n),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var n,r,o;return t(this,(function(t){switch(t.label){case 0:n=e.getReader(),t.label=1;case 1:t.trys.push([1,,9,10]),t.label=2;case 2:return[4,u(n.read())];case 3:return r=t.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,t.sent()];case 5:return[4,u(o)];case 6:return[4,t.sent()];case 7:return t.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function G(e){return a(null==e?void 0:e.getReader)}function F(e){if(e instanceof P)return e;if(null!=e){if(U(e))return i=e,new P((function(e){var n=i[j]();if(a(n.subscribe))return n.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(N(e))return o=e,new P((function(e){for(var n=0;n<o.length&&!e.closed;n++)e.next(o[n]);e.complete()}));if(R(e))return t=e,new P((function(e){t.then((function(n){e.closed||(e.next(n),e.complete())}),(function(n){return e.error(n)})).then(null,y)}));if(J(e))return Y(e);if(V(e))return n=e,new P((function(e){var t,o;try{for(var i=r(n),u=i.next();!u.done;u=i.next()){var a=u.value;if(e.next(a),e.closed)return}}catch(e){t={error:e}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(t)throw t.error}}e.complete()}));if(G(e))return Y(B(e))}var n,t,o,i;throw z(e)}function Y(e){return new P((function(n){(function(e,n){var o,i,u,a,c,l,s,d;return c=this,l=void 0,d=function(){var c,l;return t(this,(function(t){switch(t.label){case 0:t.trys.push([0,5,6,11]),o=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,t=e[Symbol.asyncIterator];return t?t.call(e):(e=r(e),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(t){n[t]=e[t]&&function(n){return new Promise((function(r,o){!function(e,n,t,r){Promise.resolve(r).then((function(n){e({value:n,done:t})}),n)}(r,o,(n=e[t](n)).done,n.value)}))}}}(e),t.label=1;case 1:return[4,o.next()];case 2:if((i=t.sent()).done)return[3,4];if(c=i.value,n.next(c),n.closed)return[2];t.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=t.sent(),u={error:l},[3,11];case 6:return t.trys.push([6,,9,10]),i&&!i.done&&(a=o.return)?[4,a.call(o)]:[3,8];case 7:t.sent(),t.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,n){function t(e){try{o(d.next(e))}catch(e){n(e)}}function r(e){try{o(d.throw(e))}catch(e){n(e)}}function o(n){var o;n.done?e(n.value):(o=n.value,o instanceof s?o:new s((function(e){e(o)}))).then(t,r)}o((d=d.apply(c,l||[])).next())}))})(e,n).catch((function(e){return n.error(e)}))}))}function Q(e){return function(n){if(function(e){return a(null==e?void 0:e.lift)}(n))return n.lift((function(n){try{return e(n,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function W(e,n,t,r,o){return new X(e,n,t,r,o)}var X=function(e){function t(n,t,r,o,i,u){var a=e.call(this,n)||this;return a.onFinalize=i,a.shouldUnsubscribe=u,a._next=t?function(e){try{t(e)}catch(e){n.error(e)}}:e.prototype._next,a._error=o?function(e){try{o(e)}catch(e){n.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=r?function(){try{r()}catch(e){n.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return n(t,e),t.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var t=this.closed;e.prototype.unsubscribe.call(this),!t&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},t}(C);function Z(e,n){return Q((function(t,r){var o=0;t.subscribe(W(r,(function(t){r.next(e.call(n,t,o++))})))}))}function $(e,n,t,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=n.schedule((function(){t(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}function ee(e,n,t){return void 0===t&&(t=1/0),a(n)?ee((function(t,r){return Z((function(e,o){return n(t,e,r,o)}))(F(e(t,r)))}),t):("number"==typeof n&&(t=n),Q((function(n,r){return function(e,n,t,r,o,i,u,a){var c=[],l=0,s=0,d=!1,p=function(){!d||c.length||l||n.complete()},f=function(e){return l<r?h(e):c.push(e)},h=function(e){l++;var o=!1;F(t(e,s++)).subscribe(W(n,(function(e){n.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{l--;for(;c.length&&l<r;)e=void 0,e=c.shift(),h(e);p()}catch(e){n.error(e)}var e})))};return e.subscribe(W(n,f,(function(){d=!0,p()}))),function(){}}(n,r,e,t)})))}var ne=Array.isArray;function te(e){return Z((function(n){return function(e,n){return ne(n)?e.apply(void 0,i([],o(n))):e(n)}(e,n)}))}var re=["addListener","removeListener"],oe=["addEventListener","removeEventListener"],ie=["on","off"];function ue(e,n,t,r){if(a(t)&&(r=t,t=void 0),r)return ue(e,n,t).pipe(te(r));var i=o(function(e){return a(e.addEventListener)&&a(e.removeEventListener)}(e)?oe.map((function(r){return function(o){return e[r](n,o,t)}})):function(e){return a(e.addListener)&&a(e.removeListener)}(e)?re.map(ae(e,n)):function(e){return a(e.on)&&a(e.off)}(e)?ie.map(ae(e,n)):[],2),u=i[0],c=i[1];if(!u&&N(e))return ee((function(e){return ue(e,n,t)}))(F(e));if(!u)throw new TypeError("Invalid event target");return new P((function(e){var n=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return e.next(1<n.length?n:n[0])};return u(n),function(){return c(n)}}))}function ae(e,n){return function(t){return function(r){return e[t](n,r)}}}var ce=function(e){function t(n,t){return e.call(this)||this}return n(t,e),t.prototype.schedule=function(e,n){return void 0===n&&(n=0),this},t}(d),le={setInterval:function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var u=le.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,i([e,n],o(t))):setInterval.apply(void 0,i([e,n],o(t)))},clearInterval:function(e){var n=le.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(e)},delegate:void 0},se=function(e){function t(n,t){var r=e.call(this,n,t)||this;return r.scheduler=n,r.work=t,r.pending=!1,r}return n(t,e),t.prototype.schedule=function(e,n){var t;if(void 0===n&&(n=0),this.closed)return this;this.state=e;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,n)),this.pending=!0,this.delay=n,this.id=null!==(t=this.id)&&void 0!==t?t:this.requestAsyncId(o,this.id,n),this},t.prototype.requestAsyncId=function(e,n,t){return void 0===t&&(t=0),le.setInterval(e.flush.bind(e,this),t)},t.prototype.recycleAsyncId=function(e,n,t){if(void 0===t&&(t=0),null!=t&&this.delay===t&&!1===this.pending)return n;null!=n&&le.clearInterval(n)},t.prototype.execute=function(e,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(e,n);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,n){var t,r=!1;try{this.work(e)}catch(e){r=!0,t=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),t},t.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,t=this.scheduler,r=t.actions;this.work=this.state=this.scheduler=null,this.pending=!1,s(r,this),null!=n&&(this.id=this.recycleAsyncId(t,n,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(ce),de={now:function(){return(de.delegate||Date).now()},delegate:void 0},pe=function(){function e(n,t){void 0===t&&(t=e.now),this.schedulerActionCtor=n,this.now=t}return e.prototype.schedule=function(e,n,t){return void 0===n&&(n=0),new this.schedulerActionCtor(this,e).schedule(t,n)},e.now=de.now,e}(),fe=new(function(e){function t(n,t){void 0===t&&(t=pe.now);var r=e.call(this,n,t)||this;return r.actions=[],r._active=!1,r}return n(t,e),t.prototype.flush=function(e){var n=this.actions;if(this._active)n.push(e);else{var t;this._active=!0;do{if(t=e.execute(e.state,e.delay))break}while(e=n.shift());if(this._active=!1,t){for(;e=n.shift();)e.unsubscribe();throw t}}},t}(pe))(se),he=fe;function ve(e,n){return void 0===n&&(n=fe),Q((function(t,r){var o=null,i=null,u=null,a=function(){if(o){o.unsubscribe(),o=null;var e=i;i=null,r.next(e)}};function c(){var t=u+e,i=n.now();if(i<t)return o=this.schedule(void 0,t-i),void r.add(o);a()}t.subscribe(W(r,(function(t){i=t,u=n.now(),o||(o=n.schedule(c,e),r.add(o))}),(function(){a(),r.complete()}),void 0,(function(){i=o=null})))}))}var me=Array.isArray,ye=Object.getPrototypeOf,be=Object.prototype,we=Object.keys;function Se(e,n){return void 0===n&&(n=0),Q((function(t,r){t.subscribe(W(r,(function(t){return $(r,e,(function(){return r.next(t)}),n)}),(function(){return $(r,e,(function(){return r.complete()}),n)}),(function(t){return $(r,e,(function(){return r.error(t)}),n)})))}))}function ge(e,n){return void 0===n&&(n=0),Q((function(t,r){r.add(e.schedule((function(){return t.subscribe(r)}),n))}))}function Ee(e,n){if(!e)throw new Error("Iterable cannot be null");return new P((function(t){$(t,n,(function(){var r=e[Symbol.asyncIterator]();$(t,n,(function(){r.next().then((function(e){e.done?t.complete():t.next(e.value)}))}),0,!0)}))}))}function Ce(e,n){return n?function(e,n){if(null!=e){if(U(e))return function(e,n){return F(e).pipe(ge(n),Se(n))}(e,n);if(N(e))return function(e,n){return new P((function(t){var r=0;return n.schedule((function(){r===e.length?t.complete():(t.next(e[r++]),t.closed||this.schedule())}))}))}(e,n);if(R(e))return function(e,n){return F(e).pipe(ge(n),Se(n))}(e,n);if(J(e))return Ee(e,n);if(V(e))return function(e,n){return new P((function(t){var r;return $(t,n,(function(){r=e[D](),$(t,n,(function(){var e,n,o;try{n=(e=r.next()).value,o=e.done}catch(e){return void t.error(e)}o?t.complete():t.next(n)}),0,!0)})),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(e,n);if(G(e))return function(e,n){return Ee(B(e),n)}(e,n)}throw z(e)}(e,n):F(e)}function Le(e){return e&&a(e.schedule)}function Ie(e){return e[e.length-1]}function ke(e){return Le(Ie(e))?e.pop():void 0}function _e(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var t=ke(e),r=function(e){return a(Ie(e))?e.pop():void 0}(e),o=function(e){if(1===e.length){var n=e[0];if(me(n))return{args:n,keys:null};if((r=n)&&"object"==typeof r&&ye(r)===be){var t=we(n);return{args:t.map((function(e){return n[e]})),keys:t}}}var r;return{args:e,keys:null}}(e),i=o.args,u=o.keys;if(0===i.length)return Ce([],t);var c=new P(function(e,n,t){return void 0===t&&(t=M),function(r){Te(n,(function(){for(var o=e.length,i=new Array(o),u=o,a=o,c=function(o){Te(n,(function(){var c=Ce(e[o],n),l=!1;c.subscribe(W(r,(function(e){i[o]=e,l||(l=!0,a--),a||r.next(t(i.slice()))}),(function(){--u||r.complete()})))}),r)},l=0;l<o;l++)c(l)}),r)}}(i,t,u?function(e){return function(e,n){return e.reduce((function(e,t,r){return e[t]=n[r],e}),{})}(u,e)}:M));return r?c.pipe(te(r)):c}function Te(e,n,t){e?$(t,e,n):n()}var Oe=new P((function(e){return e.complete()}));function xe(e){return e<=0?function(){return Oe}:Q((function(n,t){var r=0;n.subscribe(W(t,(function(n){++r<=e&&(t.next(n),e<=r&&t.complete())})))}))}function je(e,n){return n?function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return(void 0===(t=1)&&(t=1/0),ee(M,t))(Ce(e,ke(e)));var t}(n.pipe(xe(1),Q((function(e,n){e.subscribe(W(n,b))}))),t.pipe(je(e)))}:ee((function(n,t){return F(e(n,t)).pipe(xe(1),function(e){return Z((function(){return e}))}(n))}))}var Me=function(){this.job=null,this.company=null,this.money=null};function Pe(e,n){null!==n&&n.forEach((function(n){e.removeChild(n)}))}function Ae(){var e,n=document.querySelector(".middle");console.log(JSON.parse(sessionStorage.getItem("current-user")).skills),(e=JSON.parse(sessionStorage.getItem("current-user")).skills,Ce(fetch(Ke+"?skills="+e.toLowerCase(),{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))).subscribe((function(e){!function(e,n){var t=document.createElement("div");t.classList.add("divUserViewKonkurs"),n.forEach((function(e){var n=document.createElement("div");n.classList.add("divKonkurs");var r=document.createElement("label");r.innerHTML="Posao: "+e.job,n.appendChild(r);var o=document.createElement("label");o.innerHTML="Kompanija: "+e.company,n.appendChild(o);var i=document.createElement("label");i.innerHTML="Plata: "+e.money,n.appendChild(i);var u,a,c,l=document.createElement("button");u=l,a=JSON.parse(sessionStorage.getItem("current-user")),c=e,u.onclick=function(){(function(e,n){var t=new URLSearchParams;return t.append("job",n.job),t.append("company",n.company),t.append("money",n.money),t.append("userCV",e.userCV),Ce(fetch(Ne+"?email="+e.email,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:t}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))})(a,c).subscribe((function(e){e.valid?(alert(e.msg),document.location.reload()):alert(e.msg)}))},l.innerHTML="Prijavi se",n.appendChild(l),t.appendChild(n)})),e.appendChild(t)}(n,e)}))}var qe="http://127.0.0.1:6500/user",He="http://127.0.0.1:6500/konkurs",Ke="http://127.0.0.1:6500/user-konkurs",Ne="http://127.0.0.1:6500/prijavi-na-konkurs",Re=function(e){this.label=e},Ue=function(){var e=function(n,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},e(n,t)};return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}(),Je=function(e){function n(){var n=e.call(this,"KORISNIK")||this;return n.name=null,n.lastname=null,n.email=null,n.password=null,n.skills=null,n.userCV=null,n}return Ue(n,e),n}(Re);function ze(){var e,n=new Je,t=ue(document.querySelector("#userPass"),"input").pipe(ve(200),Z((function(e){return e.target.value})));_e([ue(document.querySelector("#userEmail"),"input").pipe(ve(200),Z((function(e){return e.target.value}))),t]).subscribe((function(e){n.email=e[0],n.password=e[1]})),ue(document.querySelector("#btnLogin"),"click").pipe((e=function(){return e=n.email,t=n.password,Ce(fetch(qe+"?email="+e+"&password="+t,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})));var e,t},Q((function(n,t){var r=null,o=!1,i=function(){return o&&!r&&t.complete()};n.subscribe(W(t,(function(n){null==r||r.unsubscribe();0;F(e()).subscribe(r=W(t,(function(e){return t.next(e)}),(function(){r=null,i()})))}),(function(){o=!0,i()})))}))),function(e,n){void 0===n&&(n=fe);var t=function(e,n,t){void 0===e&&(e=0),void 0===t&&(t=he);var r=-1;return null!=n&&(Le(n)?t=n:r=n),new P((function(n){var o,i=(o=e)instanceof Date&&!isNaN(o)?+e-t.now():e;i<0&&(i=0);var u=0;return t.schedule((function(){n.closed||(n.next(u++),0<=r?this.schedule(void 0,r):n.complete())}),i)}))}(500,n);return je((function(){return t}))}()).subscribe((function(e){null===e?alert("Niste uneli ispravne podatke"):(sessionStorage.setItem("current-user",JSON.stringify(e)),sessionStorage.setItem("current-user-label",void 0===e.skills?"KOMPANIJA":"KORISNIK"),document.location.reload())}))}var De=function(){var e=function(n,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},e(n,t)};return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}(),Ve=function(e){function n(){var n=e.call(this,"KOMPANIJA")||this;return n.name=null,n.description=null,n.city=null,n.email=null,n.password=null,n}return De(n,e),n}(Re);function Be(e,n,t,r,o){void 0===o&&(o=null);var i=document.createElement("a");i.href=n,i.classList.add(t),i.innerHTML=r;var u=document.querySelector(e);null!==i&&null!==u&&u.appendChild(i)}function Ge(e,n){var t=document.querySelector("a[href='"+n+"']"),r=document.querySelector(e);null!==t&&null!==r&&r.removeChild(t)}function Fe(){var e=JSON.parse(sessionStorage.getItem("current-user")),n=sessionStorage.getItem("current-user-label");null!==e?("KOMPANIJA"===n&&Be(".header","#novi-konkurs","header-item","NOVI KONKURS"),Be(".header","#profil","header-item","PROFIL"),Be(".header","#odjavi-se","header-item","ODJAVI SE"),Ge(".header","#prijavi-se"),Ge(".header","#kreiraj-nalog")):(Be(".header","#prijavi-se","header-item","PRIJAVI SE"),Be(".header","#kreiraj-nalog","header-item","KREIRAJ NALOG"),Ge(".header","#profil"),Ge(".header","#odjavi-se"),void 0!==document.querySelector("a[href='#novi-konkurs']")&&Ge(".header","#novi-recept"));var t=document.querySelector("a[href='#kreiraj-nalog']");new H,null!==t&&t.addEventListener("click",(function(){var e,n;Pe(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var n=document.createElement("div");n.classList.add("selectDiv");var t=document.createElement("label");t.classList.add("chooseLabel"),t.innerHTML="Izaberite ulogu:",n.appendChild(t);var r=document.createElement("select");r.classList.add("chooseSelect"),r.id="chooseSelect";var o=document.createElement("option");o.innerHTML="",o.value="",o.selected=!0,r.appendChild(o),(o=document.createElement("option")).innerHTML="KORISNIK",o.value="KORISNIK",r.appendChild(o),(o=document.createElement("option")).innerHTML="KOMPANIJA",o.value="KOMPANIJA",r.appendChild(o),n.appendChild(r),e.appendChild(n);var i=document.createElement("div");i.classList.add("divSignup"),n.onchange=function(){var e=document.querySelector("#chooseSelect").value;Pe(document.querySelector(".divSignup"),document.querySelectorAll(".divSignup > div")),"KORISNIK"===e&&function(e){var n=document.createElement("div");n.classList.add("divSignupLabels");var t=document.createElement("label");t.innerHTML="Ime:",n.appendChild(t);var r=document.createElement("label");r.innerHTML="Prezime:",n.appendChild(r);var o=document.createElement("label");o.innerHTML="E-mail:",n.appendChild(o);var i=document.createElement("label");i.innerHTML="Lozinka:",n.appendChild(i);var u=document.createElement("label");u.innerHTML="Oblast rada:",n.appendChild(u);var a=document.createElement("label");a.innerHTML="Napisite vas CV:",n.appendChild(a),e.appendChild(n);var c=document.createElement("div");c.classList.add("divSignupInput");var l=document.createElement("input");l.id="signup-name",l.type="name",c.appendChild(l);var s=document.createElement("input");s.id="signup-lastname",s.type="name",c.appendChild(s);var d=document.createElement("input");d.id="signup-email",d.type="email",c.appendChild(d);var p=document.createElement("input");p.id="signup-password",p.type="password",c.appendChild(p);var f=document.createElement("input");f.id="signup-skills",f.type="name",c.appendChild(f);var h=document.createElement("textarea");h.id="signup-usercv",h.rows=12,h.cols=36,c.appendChild(h),e.appendChild(c)}(i),"KOMPANIJA"===e&&function(e){var n=document.createElement("div");n.classList.add("divSignupLabels");var t=document.createElement("label");t.innerHTML="Naziv:",n.appendChild(t);var r=document.createElement("label");r.innerHTML="Grad:",n.appendChild(r);var o=document.createElement("label");o.innerHTML="E-mail:",n.appendChild(o);var i=document.createElement("label");i.innerHTML="Lozinka:",n.appendChild(i);var u=document.createElement("label");u.innerHTML="Opisite kompaniju:",n.appendChild(u),e.appendChild(n);var a=document.createElement("div");a.classList.add("divSignupInput");var c=document.createElement("input");c.id="signup-name",c.type="name",a.appendChild(c);var l=document.createElement("input");l.id="signup-city",l.type="name",a.appendChild(l);var s=document.createElement("input");s.id="signup-email",s.type="email",a.appendChild(s);var d=document.createElement("input");d.id="signup-password",d.type="password",a.appendChild(d);var p=document.createElement("textarea");p.id="signup-description",p.rows=12,p.cols=36,a.appendChild(p),e.appendChild(a)}(i)},e.appendChild(i);var u=document.createElement("div");u.classList.add("divSignupButton");var a=document.createElement("button");a.classList.add("signupButton"),a.innerHTML="Kreiraj",u.appendChild(a),e.appendChild(u)}(document.querySelector(".middle")),e=new Je,n=new Ve,document.querySelector(".signupButton").addEventListener("click",(function(){var t,r,o=document.querySelector("#chooseSelect").value;"KORISNIK"===o?(e.name=document.querySelector("#signup-name").value,e.lastname=document.querySelector("#signup-lastname").value,e.email=document.querySelector("#signup-email").value,e.password=document.querySelector("#signup-password").value,e.skills=document.querySelector("#signup-skills").value,e.userCV=document.querySelector("#signup-usercv").value):"KOMPANIJA"===o&&(n.name=document.querySelector("#signup-name").value,n.city=document.querySelector("#signup-city").value,n.email=document.querySelector("#signup-email").value,n.password=document.querySelector("#signup-password").value,n.description=document.querySelector("#signup-description").value),("KORISNIK"!==o||""!==e.name&&""!==e.email&&""!==e.password&&""!==e.skills&&""!==e.userCV)&&("KOMPANIJA"!==o||""!==n.name&&""!==n.city&&""!==n.description&&""!==n.email&&""!==n.password)?(t="KORISNIK"===o?e.email:n.email,r=o,Ce(fetch(qe+"?email="+t+"&label="+r,{method:"GET"}).then((function(e){return!!e.ok})).catch((function(e){return console.log(e)})))).subscribe((function(t){t?alert("Korisnik sa ovo email adresom vec postoji..."):function(e,n){var t=new URLSearchParams;return"KORISNIK"===n?(t.append("name",e.name),t.append("lastname",e.lastname),t.append("email",e.email),t.append("password",e.password),t.append("skills",e.skills),t.append("userCV",e.userCV)):(t.append("name",e.name),t.append("city",e.city),t.append("email",e.email),t.append("password",e.password),t.append("description",e.description)),Ce(fetch(qe+"?label="+n,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:t}).then((function(e){return!!e.ok})).catch((function(e){return console.log(e)})))}("KORISNIK"===o?e:n,o).subscribe((function(t){!1===t?alert("Doslo je do greske pokusajte ponovo."):(sessionStorage.setItem("current-user-label",o),sessionStorage.setItem("current-user","KORISNIK"===o?e.email:n.email),alert("Uspesno ste registrovani."),document.location.reload())}))})):alert("Morate da unesete sva polja...")}))}));var r=document.querySelector("a[href='#prijavi-se']");new H,null!==r&&r.addEventListener("click",(function(){Pe(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var n=document.createElement("div");n.classList.add("divLogin");var t=document.createElement("div");t.classList.add("divLoginLabels");var r=document.createElement("label");r.innerHTML="E-mail:",t.appendChild(r);var o=document.createElement("label");o.innerHTML="Password:",t.appendChild(o),n.appendChild(t);var i=document.createElement("div");i.classList.add("divLoginInput");var u=document.createElement("input");u.id="userEmail",u.type="email",i.appendChild(u);var a=document.createElement("input");a.id="userPass",a.type="password",i.appendChild(a),n.appendChild(i),e.appendChild(n);var c=document.createElement("div");c.classList.add("divLoginButton");var l=document.createElement("button");l.id="btnLogin",l.innerHTML="Uloguj se",c.appendChild(l),e.appendChild(c)}(document.querySelector(".middle")),ze()}));var o=document.querySelector("a[href='#odjavi-se']");null!==o&&o.addEventListener("click",(function(){Pe(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),sessionStorage.removeItem("current-user"),document.location.reload()}));var i=document.querySelector("a[href='#profil']");null!==i&&(i.onclick=function(){!function(e){var n=document.querySelector(".middle"),t=document.createElement("div");t.classList.add("divUserProfile");var r=document.createElement("h2");r.classList.add("userInfoNaslov"),JSON.parse(sessionStorage.getItem("current-user")).email===e.email?r.innerHTML="Vas profil":r.innerHTML="Korisnik",t.appendChild(r);var o=document.createElement("div");o.classList.add("divUserProfileInfo"),"KORISNIK"===sessionStorage.getItem("current-user-label")?function(e,n){var t=document.createElement("div");t.classList.add("divUserProfileInfoData");var r=document.createElement("div"),o=document.createElement("label");o.classList.add("main-label"),o.innerHTML="Ime: ",r.appendChild(o);var i=document.createElement("div");i.innerHTML=n.name+" "+n.lastname,r.appendChild(i),t.appendChild(r);var u=document.createElement("div"),a=document.createElement("label");a.classList.add("main-label"),a.innerHTML="Email: ",u.appendChild(a);var c=document.createElement("div");c.innerHTML=n.email,u.appendChild(c),t.appendChild(u);var l=document.createElement("div"),s=document.createElement("label");s.classList.add("main-label"),s.innerHTML="Skills: ",l.appendChild(s);var d=document.createElement("div");d.innerHTML=n.skills,l.appendChild(d),t.appendChild(l);var p=document.createElement("div"),f=document.createElement("label");f.classList.add("main-label"),f.innerHTML="CV korisnika: ",p.appendChild(f);var h=document.createElement("div");h.innerHTML=n.userCV,p.appendChild(h),t.appendChild(p),e.appendChild(t)}(o,e):function(e,n){var t=document.createElement("div");t.classList.add("divUserProfileInfoData");var r=document.createElement("div"),o=document.createElement("label");o.classList.add("main-label"),o.innerHTML="Naziv: ",r.appendChild(o);var i=document.createElement("div");i.innerHTML=n.name,r.appendChild(i),t.appendChild(r);var u=document.createElement("div"),a=document.createElement("label");a.classList.add("main-label"),a.innerHTML="Email: ",u.appendChild(a);var c=document.createElement("div");c.innerHTML=n.email,u.appendChild(c),t.appendChild(u);var l=document.createElement("div"),s=document.createElement("label");s.classList.add("main-label"),s.innerHTML="Grad: ",l.appendChild(s);var d=document.createElement("div");d.innerHTML=n.city,l.appendChild(d),t.appendChild(l);var p=document.createElement("div"),f=document.createElement("label");f.classList.add("main-label"),f.innerHTML="Opis kompanije: ",p.appendChild(f);var h=document.createElement("div");h.innerHTML=n.description,p.appendChild(h),t.appendChild(p),e.appendChild(t)}(o,e),t.appendChild(o),n.appendChild(t)}(e)});var u=document.querySelector("a[href='#novi-konkurs']");null!==u&&(u.onclick=function(){Pe(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var n=document.createElement("div");n.classList.add("divNewKonkurs");var t=document.createElement("div");t.classList.add("divJobInput");var r=document.createElement("label");r.innerHTML="Posao: ",t.appendChild(r);var o=document.createElement("input");o.type="name",o.id="jobInput",t.appendChild(o),n.appendChild(t);var i=document.createElement("div");i.classList.add("divMoneyInput");var u=document.createElement("label");u.innerHTML="Plata: ",i.appendChild(u);var a=document.createElement("input");a.type="name",a.id="moneyInput",i.appendChild(a),n.appendChild(i);var c=document.createElement("div");c.classList.add("divKonkursButton");var l=document.createElement("button");l.innerHTML="Dodaj konkurs",l.id="newKonkursButton",c.appendChild(l),n.appendChild(c),e.appendChild(n)}(document.querySelector(".middle")),document.querySelector("#newKonkursButton").onclick=function(){var e,n,t=document.querySelector("#jobInput").value,r=document.querySelector("#moneyInput").value;if(console.log(t,r),""===t||""===r)alert("Unesite sva polja.");else{var o=new Me;o.job=t,o.money=r,o.company=JSON.parse(sessionStorage.getItem("current-user")).name,(e=o,n=new URLSearchParams,n.append("job",e.job),n.append("company",e.company),n.append("money",e.money),Ce(fetch(He,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:n}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))).subscribe((function(e){e.valid?(alert(e.msg),document.location.reload()):alert(e.msg)}))}}})}document.body.onload=function(){Fe(),"KORISNIK"===sessionStorage.getItem("current-user-label")&&Ae(),document.querySelector("a[href='#pocetna']").addEventListener("click",(function(){document.location.reload()})),document.querySelector("a[href='#search-input']").onclick=function(){var e,n;document.querySelector("#search-bar-dropdown-show").classList.toggle("hideDisplay"),e=document.querySelector("#search-bar-dropdown-show"),(n=document.querySelectorAll(".divSearchSingleRecept")).length>0&&n.forEach((function(n){return e.removeChild(n)}))}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU93UixZQUFZRCxFQUFuQixHQWQ1QixDYUxKLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYubWpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2NyZWF0ZUVycm9yQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9lcnJvckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9waXBlLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3ViamVjdC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvaW5uZXJGcm9tLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbGlmdC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tYXAuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9leGVjdXRlU2NoZWR1bGUuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUludGVybmFscy5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL21hcE9uZU9yTWFueUFyZ3MuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tRXZlbnQuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FjdGlvbi5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvaW50ZXJ2YWxQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGVib3VuY2VUaW1lLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJnc0FyZ0FycmF5T3JPYmplY3QuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL29ic2VydmVPbi5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24uanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb20uanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVPYnNlcnZhYmxlLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFycmF5LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcmdzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvY29tYmluZUxhdGVzdC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2NyZWF0ZU9iamVjdC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy90YWtlLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9kZWxheVdoZW4uanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlQWxsLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRBbGwuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2lnbm9yZUVsZW1lbnRzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tYXBUby5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL2NsYXNzZXMva29ua3Vycy50cyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL3NyYy9wb2NldG5hRXZlbnRzLnRzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vc3JjL2RiU2VydmljZXMudHMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9zcmMvZHJhd0Z1bmN0aW9ucy50cyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL3NyYy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9jbGFzc2VzL2VudGl0eS50cyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL2NsYXNzZXMvdXNlci50cyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL3NyYy9sb2dpbkV2ZW50cy50cyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9kZWxheS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL3RpbWVyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNEYXRlLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vY2xhc3Nlcy9rb21wYW5pamEudHMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUvLi9zcmMvc2lnbnVwRXZlbnRzLnRzIiwid2VicGFjazovL2NsaWVudC1zaWRlLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlLCBTdXBwcmVzc2VkRXJyb3IsIFN5bWJvbCAqL1xuXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcbiAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn1cblxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQ7XG4gIH1cbiAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xuICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cbiAgdmFyIGtpbmQgPSBjb250ZXh0SW4ua2luZCwga2V5ID0ga2luZCA9PT0gXCJnZXR0ZXJcIiA/IFwiZ2V0XCIgOiBraW5kID09PSBcInNldHRlclwiID8gXCJzZXRcIiA6IFwidmFsdWVcIjtcbiAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XG4gIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xuICB2YXIgXywgZG9uZSA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluKSBjb250ZXh0W3BdID0gcCA9PT0gXCJhY2Nlc3NcIiA/IHt9IDogY29udGV4dEluW3BdO1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XG4gICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xuICAgICAgdmFyIHJlc3VsdCA9ICgwLCBkZWNvcmF0b3JzW2ldKShraW5kID09PSBcImFjY2Vzc29yXCIgPyB7IGdldDogZGVzY3JpcHRvci5nZXQsIHNldDogZGVzY3JpcHRvci5zZXQgfSA6IGRlc2NyaXB0b3Jba2V5XSwgY29udGV4dCk7XG4gICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5pbml0KSkgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gXCJmaWVsZFwiKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XG4gICAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xuICBkb25lID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XG4gIHZhciB1c2VWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xuICB9XG4gIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSBuYW1lID0gbmFtZS5kZXNjcmlwdGlvbiA/IFwiW1wiLmNvbmNhdChuYW1lLmRlc2NyaXB0aW9uLCBcIl1cIikgOiBcIlwiO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XG4gIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICB9XG59XG5cbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICBvW2syXSA9IG1ba107XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XG4gIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcbiAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgIH1cbiAgfTtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcbiAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICBpZiAoIW0pIHJldHVybiBvO1xuICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgdHJ5IHtcbiAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICB9XG4gIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICB9XG4gICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgfVxuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xuICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcbiAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgIHJba10gPSBhW2pdO1xuICByZXR1cm4gcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcbiAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xuICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cbiAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcbiAgdmFyIGksIHA7XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcbiAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XG4gIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gIHJldHVybiBjb29rZWQ7XG59O1xuXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcbiAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xuICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcbiAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlKGVudiwgdmFsdWUsIGFzeW5jKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZC5cIik7XG4gICAgdmFyIGRpc3Bvc2U7XG4gICAgaWYgKGFzeW5jKSB7XG4gICAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmFzeW5jRGlzcG9zZV07XG4gICAgfVxuICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcbiAgICAgICAgaWYgKCFTeW1ib2wuZGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5kaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5kaXNwb3NlXTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkaXNwb3NlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qgbm90IGRpc3Bvc2FibGUuXCIpO1xuICAgIGVudi5zdGFjay5wdXNoKHsgdmFsdWU6IHZhbHVlLCBkaXNwb3NlOiBkaXNwb3NlLCBhc3luYzogYXN5bmMgfSk7XG4gIH1cbiAgZWxzZSBpZiAoYXN5bmMpIHtcbiAgICBlbnYuc3RhY2sucHVzaCh7IGFzeW5jOiB0cnVlIH0pO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIF9TdXBwcmVzc2VkRXJyb3IgPSB0eXBlb2YgU3VwcHJlc3NlZEVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBTdXBwcmVzc2VkRXJyb3IgOiBmdW5jdGlvbiAoZXJyb3IsIHN1cHByZXNzZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGUgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBlLmVycm9yID0gZXJyb3IsIGUuc3VwcHJlc3NlZCA9IHN1cHByZXNzZWQsIGU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19kaXNwb3NlUmVzb3VyY2VzKGVudikge1xuICBmdW5jdGlvbiBmYWlsKGUpIHtcbiAgICBlbnYuZXJyb3IgPSBlbnYuaGFzRXJyb3IgPyBuZXcgX1N1cHByZXNzZWRFcnJvcihlLCBlbnYuZXJyb3IsIFwiQW4gZXJyb3Igd2FzIHN1cHByZXNzZWQgZHVyaW5nIGRpc3Bvc2FsLlwiKSA6IGU7XG4gICAgZW52Lmhhc0Vycm9yID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHdoaWxlIChlbnYuc3RhY2subGVuZ3RoKSB7XG4gICAgICB2YXIgcmVjID0gZW52LnN0YWNrLnBvcCgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlYy5kaXNwb3NlICYmIHJlYy5kaXNwb3NlLmNhbGwocmVjLnZhbHVlKTtcbiAgICAgICAgaWYgKHJlYy5hc3luYykgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgZmFpbChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVudi5oYXNFcnJvcikgdGhyb3cgZW52LmVycm9yO1xuICB9XG4gIHJldHVybiBuZXh0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvckNsYXNzKGNyZWF0ZUltcGwpIHtcbiAgICB2YXIgX3N1cGVyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIEVycm9yLmNhbGwoaW5zdGFuY2UpO1xuICAgICAgICBpbnN0YW5jZS5zdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIH07XG4gICAgdmFyIGN0b3JGdW5jID0gY3JlYXRlSW1wbChfc3VwZXIpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yRnVuYztcbiAgICByZXR1cm4gY3RvckZ1bmM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVFcnJvckNsYXNzLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUVycm9yQ2xhc3MgfSBmcm9tICcuL2NyZWF0ZUVycm9yQ2xhc3MnO1xuZXhwb3J0IHZhciBVbnN1YnNjcmlwdGlvbkVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yc1xuICAgICAgICAgICAgPyBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gaSArIDEgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKTsgfSkuam9pbignXFxuICAnKVxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBhcnJSZW1vdmUoYXJyLCBpdGVtKSB7XG4gICAgaWYgKGFycikge1xuICAgICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgMCA8PSBpbmRleCAmJiBhcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJSZW1vdmUuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5LCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihpbml0aWFsVGVhcmRvd24pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsVGVhcmRvd24gPSBpbml0aWFsVGVhcmRvd247XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgICAgICBpZiAoX3BhcmVudGFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9wYXJlbnRhZ2VfMSA9IF9fdmFsdWVzKF9wYXJlbnRhZ2UpLCBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCk7ICFfcGFyZW50YWdlXzFfMS5kb25lOyBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBfcGFyZW50YWdlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfMS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcGFyZW50YWdlXzFfMSAmJiAhX3BhcmVudGFnZV8xXzEuZG9uZSAmJiAoX2EgPSBfcGFyZW50YWdlXzEucmV0dXJuKSkgX2EuY2FsbChfcGFyZW50YWdlXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50YWdlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5pdGlhbEZpbmFsaXplciA9IHRoaXMuaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaW5pdGlhbEZpbmFsaXplcikpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsRmluYWxpemVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yID8gZS5lcnJvcnMgOiBbZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgICAgIGlmIChfZmluYWxpemVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9maW5hbGl6ZXJzXzEgPSBfX3ZhbHVlcyhfZmluYWxpemVycyksIF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpOyAhX2ZpbmFsaXplcnNfMV8xLmRvbmU7IF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxpemVyID0gX2ZpbmFsaXplcnNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKGZpbmFsaXplcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICE9PSBudWxsICYmIGVycm9ycyAhPT0gdm9pZCAwID8gZXJyb3JzIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoZXJyb3JzKSksIF9fcmVhZChlcnIuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzXzFfMSAmJiAhX2ZpbmFsaXplcnNfMV8xLmRvbmUgJiYgKF9iID0gX2ZpbmFsaXplcnNfMS5yZXR1cm4pKSBfYi5jYWxsKF9maW5hbGl6ZXJzXzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGVhcmRvd24gJiYgdGVhcmRvd24gIT09IHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIodGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bi5jbG9zZWQgfHwgdGVhcmRvd24uX2hhc1BhcmVudCh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duLl9hZGRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICh0aGlzLl9maW5hbGl6ZXJzID0gKF9hID0gdGhpcy5fZmluYWxpemVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pLnB1c2godGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9oYXNQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICByZXR1cm4gX3BhcmVudGFnZSA9PT0gcGFyZW50IHx8IChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpICYmIF9wYXJlbnRhZ2UuaW5jbHVkZXMocGFyZW50KSk7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpID8gKF9wYXJlbnRhZ2UucHVzaChwYXJlbnQpLCBfcGFyZW50YWdlKSA6IF9wYXJlbnRhZ2UgPyBbX3BhcmVudGFnZSwgcGFyZW50XSA6IHBhcmVudDtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX3JlbW92ZVBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIGlmIChfcGFyZW50YWdlID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgYXJyUmVtb3ZlKF9wYXJlbnRhZ2UsIHBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgIF9maW5hbGl6ZXJzICYmIGFyclJlbW92ZShfZmluYWxpemVycywgdGVhcmRvd24pO1xuICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRlYXJkb3duLl9yZW1vdmVQYXJlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbmV4cG9ydCB2YXIgRU1QVFlfU1VCU0NSSVBUSU9OID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbiB8fFxuICAgICAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5yZW1vdmUpICYmIGlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSkpO1xufVxuZnVuY3Rpb24gZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihmaW5hbGl6ZXIpKSB7XG4gICAgICAgIGZpbmFsaXplcigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZmluYWxpemVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcCIsImV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIG9uVW5oYW5kbGVkRXJyb3I6IG51bGwsXG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uOiBudWxsLFxuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nOiBmYWxzZSxcbiAgICB1c2VEZXByZWNhdGVkTmV4dENvbnRleHQ6IGZhbHNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgdGltZW91dFByb3ZpZGVyID0ge1xuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRUaW1lb3V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGUuc2V0VGltZW91dC5hcHBseShkZWxlZ2F0ZSwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFyVGltZW91dCkgfHwgY2xlYXJUaW1lb3V0KShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0UHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycikge1xuICAgIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWcub25VbmhhbmRsZWRFcnJvcjtcbiAgICAgICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiZXhwb3J0IHZhciBDT01QTEVURV9OT1RJRklDQVRJT04gPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdDJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpOyB9KSgpO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yTm90aWZpY2F0aW9uKGVycm9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignRScsIHVuZGVmaW5lZCwgZXJyb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5leHROb3RpZmljYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdOJywgdmFsdWUsIHVuZGVmaW5lZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKGtpbmQsIHZhbHVlLCBlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbnZhciBjb250ZXh0ID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvckNvbnRleHQoY2IpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgdmFyIGlzUm9vdCA9ICFjb250ZXh0O1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICBjb250ZXh0ID0geyBlcnJvclRocm93bjogZmFsc2UsIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2IoKTtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgdmFyIF9hID0gY29udGV4dCwgZXJyb3JUaHJvd24gPSBfYS5lcnJvclRocm93biwgZXJyb3IgPSBfYS5lcnJvcjtcbiAgICAgICAgICAgIGNvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNiKCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFcnJvcihlcnIpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgJiYgY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgY29udGV4dC5lcnJvciA9IGVycjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvckNvbnRleHQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24sIFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWwvbm9vcCc7XG5pbXBvcnQgeyBuZXh0Tm90aWZpY2F0aW9uLCBlcnJvck5vdGlmaWNhdGlvbiwgQ09NUExFVEVfTk9USUZJQ0FUSU9OIH0gZnJvbSAnLi9Ob3RpZmljYXRpb25GYWN0b3JpZXMnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmltcG9ydCB7IGNhcHR1cmVFcnJvciB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIGlmIChpc1N1YnNjcmlwdGlvbihkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBFTVBUWV9PQlNFUlZFUjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNhZmVTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihlcnJvck5vdGlmaWNhdGlvbihlcnIpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oQ09NUExFVEVfTk9USUZJQ0FUSU9OLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlcjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBTdWJzY3JpYmVyIH07XG52YXIgX2JpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcbmZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gX2JpbmQuY2FsbChmbiwgdGhpc0FyZyk7XG59XG52YXIgQ29uc3VtZXJPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5wYXJ0aWFsT2JzZXJ2ZXIgPSBwYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgfVxuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmVycm9yKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENvbnN1bWVyT2JzZXJ2ZXI7XG59KCkpO1xudmFyIFNhZmVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2FmZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkgfHwgIW9ic2VydmVyT3JOZXh0KSB7XG4gICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgbmV4dDogKG9ic2VydmVyT3JOZXh0ICE9PSBudWxsICYmIG9ic2VydmVyT3JOZXh0ICE9PSB2b2lkIDAgPyBvYnNlcnZlck9yTmV4dCA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yICE9PSBudWxsICYmIGVycm9yICE9PSB2b2lkIDAgPyBlcnJvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGUgIT09IG51bGwgJiYgY29tcGxldGUgIT09IHZvaWQgMCA/IGNvbXBsZXRlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzE7XG4gICAgICAgICAgICBpZiAoX3RoaXMgJiYgY29uZmlnLnVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMSA9IE9iamVjdC5jcmVhdGUob2JzZXJ2ZXJPck5leHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgICAgICBuZXh0OiBvYnNlcnZlck9yTmV4dC5uZXh0ICYmIGJpbmQob2JzZXJ2ZXJPck5leHQubmV4dCwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG9ic2VydmVyT3JOZXh0LmVycm9yICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuZXJyb3IsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcik7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xuZnVuY3Rpb24gaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgY2FwdHVyZUVycm9yKGVycm9yKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JIYW5kbGVyKGVycikge1xuICAgIHRocm93IGVycjtcbn1cbmZ1bmN0aW9uIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiA9IGNvbmZpZy5vblN0b3BwZWROb3RpZmljYXRpb247XG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uICYmIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpOyB9KTtcbn1cbmV4cG9ydCB2YXIgRU1QVFlfT0JTRVJWRVIgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IG5vb3AsXG4gICAgZXJyb3I6IGRlZmF1bHRFcnJvckhhbmRsZXIsXG4gICAgY29tcGxldGU6IG5vb3AsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXAiLCJleHBvcnQgdmFyIG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUpIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwIiwiaW1wb3J0IHsgU2FmZVN1YnNjcmliZXIsIFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi91dGlsL3BpcGUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGVycm9yQ29udGV4dCB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBpc1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQpID8gb2JzZXJ2ZXJPck5leHQgOiBuZXcgU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgb3BlcmF0b3IgPSBfYS5vcGVyYXRvciwgc291cmNlID0gX2Euc291cmNlO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQob3BlcmF0b3JcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yLmNhbGwoc3Vic2NyaWJlciwgc291cmNlKVxuICAgICAgICAgICAgICAgIDogc291cmNlXG4gICAgICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdWJzY3JpYmUoc3Vic2NyaWJlcilcbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBuZXcgU2FmZVN1YnNjcmliZXIoe1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IHJlc29sdmUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh2YWx1ZSA9IHgpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBwcm9taXNlQ3RvciAhPT0gbnVsbCAmJiBwcm9taXNlQ3RvciAhPT0gdm9pZCAwID8gcHJvbWlzZUN0b3IgOiBjb25maWcuUHJvbWlzZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2ZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5uZXh0KSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmVycm9yKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmNvbXBsZXRlKTtcbn1cbmZ1bmN0aW9uIGlzU3Vic2NyaWJlcih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB8fCAoaXNPYnNlcnZlcih2YWx1ZSkgJiYgaXNTdWJzY3JpcHRpb24odmFsdWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBwaXBlKCkge1xuICAgIHZhciBmbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkoZm5zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBmbikgeyByZXR1cm4gZm4ocHJldik7IH0sIGlucHV0KTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZS5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsKCkge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdPYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdvYmplY3QgdW5zdWJzY3JpYmVkJztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgRU1QVFlfU1VCU0NSSVBUSU9OIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgfSBmcm9tICcuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgIF90aGlzLm9ic2VydmVycyA9IFtdO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgQW5vbnltb3VzU3ViamVjdCh0aGlzLCB0aGlzKTtcbiAgICAgICAgc3ViamVjdC5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl90aHJvd0lmQ2xvc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuY3VycmVudE9ic2VydmVycykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gQXJyYXkuZnJvbShfdGhpcy5vYnNlcnZlcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKF90aGlzLmN1cnJlbnRPYnNlcnZlcnMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhc0Vycm9yID0gX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN1YmplY3QucHJvdG90eXBlLCBcIm9ic2VydmVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKChfYSA9IHRoaXMub2JzZXJ2ZXJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSA+IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICB0aGlzLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXJTdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5faW5uZXJTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQsIG9ic2VydmVycyA9IF9hLm9ic2VydmVycztcbiAgICAgICAgaWYgKGhhc0Vycm9yIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX1NVQlNDUklQVElPTjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICBvYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgICAgICBhcnJSZW1vdmUob2JzZXJ2ZXJzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIHRocm93bkVycm9yID0gX2EudGhyb3duRXJyb3IsIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZDtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRocm93bkVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuYXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBTdWJqZWN0IH07XG52YXIgQW5vbnltb3VzU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFub255bW91c1N1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdmFsdWUpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIGVycik7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBFTVBUWV9TVUJTQ1JJUFRJT047XG4gICAgfTtcbiAgICByZXR1cm4gQW5vbnltb3VzU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgQW5vbnltb3VzU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdC5qcy5tYXAiLCJleHBvcnQgdmFyIGlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuL2lzRnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudGhlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwIiwiaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJbnRlcm9wT2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUob2JqKSB7XG4gICAgcmV0dXJuIFN5bWJvbC5hc3luY0l0ZXJhdG9yICYmIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FzeW5jSXRlcmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgcHJvdmlkZWQgXCIgKyAoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIGlucHV0ICsgXCInXCIpICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLiBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgUmVhZGFibGVTdHJlYW0sIEFycmF5LCBBc3luY0l0ZXJhYmxlLCBvciBJdGVyYWJsZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCAhU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxuICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XG59XG5leHBvcnQgdmFyIGl0ZXJhdG9yID0gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCIsImltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZXJhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXQgPT09IG51bGwgfHwgaW5wdXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jR2VuZXJhdG9yLCBfX2F3YWl0LCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcl8xKCkge1xuICAgICAgICB2YXIgcmVhZGVyLCBfYSwgdmFsdWUsIGRvbmU7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IHJlYWRhYmxlU3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzEsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cnVlKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQocmVhZGVyLnJlYWQoKSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHJldHVybiBbMywgNV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdCh2b2lkIDApXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCwgX19hd2FpdCh2YWx1ZSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFs0LCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDJdO1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1JlYWRhYmxlU3RyZWFtTGlrZShvYmopIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmouZ2V0UmVhZGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUmVhZGFibGVTdHJlYW1MaWtlLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNWYWx1ZXMsIF9fYXdhaXRlciwgX19nZW5lcmF0b3IsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciB9IGZyb20gJy4uL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvcic7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlLCByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIGlubmVyRnJvbShpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Qcm9taXNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUludGVyb3BPYnNlcnZhYmxlKG9iaikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb2JzID0gb2JqW1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnMuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9icy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgb2JqZWN0IGRvZXMgbm90IGNvcnJlY3RseSBpbXBsZW1lbnQgU3ltYm9sLm9ic2VydmFibGUnKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCByZXBvcnRVbmhhbmRsZWRFcnJvcik7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlcmFibGVfMSA9IF9fdmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCk7ICFpdGVyYWJsZV8xXzEuZG9uZTsgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhYmxlXzFfMSAmJiAhaXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gaXRlcmFibGVfMS5yZXR1cm4pKSBfYS5jYWxsKGl0ZXJhYmxlXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXN5bmNJdGVyYWJsZShhc3luY0l0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikge1xuICAgIHZhciBhc3luY0l0ZXJhYmxlXzEsIGFzeW5jSXRlcmFibGVfMV8xO1xuICAgIHZhciBlXzIsIF9hO1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlLCBlXzJfMTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFswLCA1LCA2LCAxMV0pO1xuICAgICAgICAgICAgICAgICAgICBhc3luY0l0ZXJhYmxlXzEgPSBfX2FzeW5jVmFsdWVzKGFzeW5jSXRlcmFibGUpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQsIGFzeW5jSXRlcmFibGVfMS5uZXh0KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgPSBfYi5zZW50KCksICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhc3luY0l0ZXJhYmxlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMywgMV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGVfMl8xID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBlXzIgPSB7IGVycm9yOiBlXzJfMSB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbNiwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSAmJiAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBhc3luY0l0ZXJhYmxlXzEucmV0dXJuKSkpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX2EuY2FsbChhc3luY0l0ZXJhYmxlXzEpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA4O1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5uZXJGcm9tLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0xpZnQoc291cmNlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmxpZnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9wZXJhdGUoaW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNMaWZ0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChmdW5jdGlvbiAobGlmdGVkU291cmNlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQobGlmdGVkU291cmNlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxpZnQgdW5rbm93biBPYnNlcnZhYmxlIHR5cGUnKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlmdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSkge1xuICAgIHJldHVybiBuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpO1xufVxudmFyIE9wZXJhdG9yU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9wZXJhdG9yU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSwgc2hvdWxkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9uRmluYWxpemUgPSBvbkZpbmFsaXplO1xuICAgICAgICBfdGhpcy5zaG91bGRVbnN1YnNjcmliZSA9IHNob3VsZFVuc3Vic2NyaWJlO1xuICAgICAgICBfdGhpcy5fbmV4dCA9IG9uTmV4dFxuICAgICAgICAgICAgPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbk5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9uZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBvbkVycm9yXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2Vycm9yO1xuICAgICAgICBfdGhpcy5fY29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9wZXJhdG9yU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZFVuc3Vic2NyaWJlIHx8IHRoaXMuc2hvdWxkVW5zdWJzY3JpYmUoKSkge1xuICAgICAgICAgICAgdmFyIGNsb3NlZF8xID0gdGhpcy5jbG9zZWQ7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAhY2xvc2VkXzEgJiYgKChfYSA9IHRoaXMub25GaW5hbGl6ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gT3BlcmF0b3JTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wZXJhdG9yU3Vic2NyaWJlci5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZXhlY3V0ZVNjaGVkdWxlKHBhcmVudFN1YnNjcmlwdGlvbiwgc2NoZWR1bGVyLCB3b3JrLCBkZWxheSwgcmVwZWF0KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgaWYgKHJlcGVhdCA9PT0gdm9pZCAwKSB7IHJlcGVhdCA9IGZhbHNlOyB9XG4gICAgdmFyIHNjaGVkdWxlU3Vic2NyaXB0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd29yaygpO1xuICAgICAgICBpZiAocmVwZWF0KSB7XG4gICAgICAgICAgICBwYXJlbnRTdWJzY3JpcHRpb24uYWRkKHRoaXMuc2NoZWR1bGUobnVsbCwgZGVsYXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH0sIGRlbGF5KTtcbiAgICBwYXJlbnRTdWJzY3JpcHRpb24uYWRkKHNjaGVkdWxlU3Vic2NyaXB0aW9uKTtcbiAgICBpZiAoIXJlcGVhdCkge1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVTdWJzY3JpcHRpb247XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZVNjaGVkdWxlLmpzLm1hcCIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgbWVyZ2VJbnRlcm5hbHMgfSBmcm9tICcuL21lcmdlSW50ZXJuYWxzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICBpZiAoaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikgeyByZXR1cm4gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50LCBvbkJlZm9yZU5leHQsIGV4cGFuZCwgaW5uZXJTdWJTY2hlZHVsZXIsIGFkZGl0aW9uYWxGaW5hbGl6ZXIpIHtcbiAgICB2YXIgYnVmZmVyID0gW107XG4gICAgdmFyIGFjdGl2ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvdXRlck5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIChhY3RpdmUgPCBjb25jdXJyZW50ID8gZG9Jbm5lclN1Yih2YWx1ZSkgOiBidWZmZXIucHVzaCh2YWx1ZSkpOyB9O1xuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBhY3RpdmUrKztcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgICAgICBvbkJlZm9yZU5leHQgPT09IG51bGwgfHwgb25CZWZvcmVOZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJlZm9yZU5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgb3V0ZXJOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbm5lckNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaW5uZXJDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS0tO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZFZhbHVlID0gYnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJTdWJTY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgaW5uZXJTdWJTY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggJiYgYWN0aXZlIDwgY29uY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvdXRlck5leHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gbnVsbCB8fCBhZGRpdGlvbmFsRmluYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhZGRpdGlvbmFsRmluYWxpemVyKCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcIi4uL29wZXJhdG9ycy9tYXBcIjtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGNhbGxPckFwcGx5KGZuLCBhcmdzKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkoYXJncykgPyBmbi5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpIDogZm4oYXJncyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFwT25lT3JNYW55QXJncyhmbikge1xuICAgIHJldHVybiBtYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGNhbGxPckFwcGx5KGZuLCBhcmdzKTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBPbmVPck1hbnlBcmdzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWVyZ2VNYXAnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgbWFwT25lT3JNYW55QXJncyB9IGZyb20gJy4uL3V0aWwvbWFwT25lT3JNYW55QXJncyc7XG52YXIgbm9kZUV2ZW50RW1pdHRlck1ldGhvZHMgPSBbJ2FkZExpc3RlbmVyJywgJ3JlbW92ZUxpc3RlbmVyJ107XG52YXIgZXZlbnRUYXJnZXRNZXRob2RzID0gWydhZGRFdmVudExpc3RlbmVyJywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInXTtcbnZhciBqcXVlcnlNZXRob2RzID0gWydvbicsICdvZmYnXTtcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucykucGlwZShtYXBPbmVPck1hbnlBcmdzKHJlc3VsdFNlbGVjdG9yKSk7XG4gICAgfVxuICAgIHZhciBfYSA9IF9fcmVhZChpc0V2ZW50VGFyZ2V0KHRhcmdldClcbiAgICAgICAgPyBldmVudFRhcmdldE1ldGhvZHMubWFwKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7IH07IH0pXG4gICAgICAgIDpcbiAgICAgICAgICAgIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICA/IG5vZGVFdmVudEVtaXR0ZXJNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgOiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgPyBqcXVlcnlNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIDogW10sIDIpLCBhZGQgPSBfYVswXSwgcmVtb3ZlID0gX2FbMV07XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoc3ViVGFyZ2V0KSB7IHJldHVybiBmcm9tRXZlbnQoc3ViVGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpOyB9KShpbm5lckZyb20odGFyZ2V0KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBldmVudCB0YXJnZXQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIubmV4dCgxIDwgYXJncy5sZW5ndGggPyBhcmdzIDogYXJnc1swXSk7XG4gICAgICAgIH07XG4gICAgICAgIGFkZChoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShoYW5kbGVyKTsgfTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07IH07XG59XG5mdW5jdGlvbiBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQuYWRkTGlzdGVuZXIpICYmIGlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUxpc3RlbmVyKTtcbn1cbmZ1bmN0aW9uIGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0Lm9uKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5vZmYpO1xufVxuZnVuY3Rpb24gaXNFdmVudFRhcmdldCh0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbih0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xudmFyIEFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gQWN0aW9uO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IEFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWN0aW9uLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciBpbnRlcnZhbFByb3ZpZGVyID0ge1xuICAgIHNldEludGVydmFsOiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSBpbnRlcnZhbFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldEludGVydmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGUuc2V0SW50ZXJ2YWwuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0SW50ZXJ2YWwuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBjbGVhckludGVydmFsOiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGludGVydmFsUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhckludGVydmFsKSB8fCBjbGVhckludGVydmFsKShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnZhbFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi9BY3Rpb24nO1xuaW1wb3J0IHsgaW50ZXJ2YWxQcm92aWRlciB9IGZyb20gJy4vaW50ZXJ2YWxQcm92aWRlcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuLi91dGlsL2FyclJlbW92ZSc7XG52YXIgQXN5bmNBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY0FjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY0FjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICBfdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5pZDtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQoc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5pZCA9IChfYSA9IHRoaXMuaWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMucmVxdWVzdEFzeW5jSWQoc2NoZWR1bGVyLCB0aGlzLmlkLCBkZWxheSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgX2lkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIGludGVydmFsUHJvdmlkZXIuc2V0SW50ZXJ2YWwoc2NoZWR1bGVyLmZsdXNoLmJpbmQoc2NoZWR1bGVyLCB0aGlzKSwgZGVsYXkpO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkID0gZnVuY3Rpb24gKF9zY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKGRlbGF5ICE9IG51bGwgJiYgdGhpcy5kZWxheSA9PT0gZGVsYXkgJiYgdGhpcy5wZW5kaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnRlcnZhbFByb3ZpZGVyLmNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdleGVjdXRpbmcgYSBjYW5jZWxsZWQgYWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMuX2V4ZWN1dGUoc3RhdGUsIGRlbGF5KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZW5kaW5nID09PSBmYWxzZSAmJiB0aGlzLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHRoaXMuc2NoZWR1bGVyLCB0aGlzLmlkLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLl9leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBfZGVsYXkpIHtcbiAgICAgICAgdmFyIGVycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yVmFsdWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndvcmsoc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGVycm9yVmFsdWUgPSBlID8gZSA6IG5ldyBFcnJvcignU2NoZWR1bGVkIGFjdGlvbiB0aHJldyBmYWxzeSBlcnJvcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcmVkKSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JWYWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBpZCA9IF9hLmlkLCBzY2hlZHVsZXIgPSBfYS5zY2hlZHVsZXI7XG4gICAgICAgICAgICB2YXIgYWN0aW9ucyA9IHNjaGVkdWxlci5hY3Rpb25zO1xuICAgICAgICAgICAgdGhpcy53b3JrID0gdGhpcy5zdGF0ZSA9IHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgYXJyUmVtb3ZlKGFjdGlvbnMsIHRoaXMpO1xuICAgICAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVsYXkgPSBudWxsO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNBY3Rpb247XG59KEFjdGlvbikpO1xuZXhwb3J0IHsgQXN5bmNBY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jQWN0aW9uLmpzLm1hcCIsImV4cG9ydCB2YXIgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyID0ge1xuICAgIG5vdzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKGRhdGVUaW1lc3RhbXBQcm92aWRlci5kZWxlZ2F0ZSB8fCBEYXRlKS5ub3coKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGRhdGVUaW1lc3RhbXBQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlcic7XG52YXIgU2NoZWR1bGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoc2NoZWR1bGVyQWN0aW9uQ3Rvciwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkgeyBub3cgPSBTY2hlZHVsZXIubm93OyB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3RvciA9IHNjaGVkdWxlckFjdGlvbkN0b3I7XG4gICAgICAgIHRoaXMubm93ID0gbm93O1xuICAgIH1cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHdvcmssIGRlbGF5LCBzdGF0ZSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLnNjaGVkdWxlckFjdGlvbkN0b3IodGhpcywgd29yaykuc2NoZWR1bGUoc3RhdGUsIGRlbGF5KTtcbiAgICB9O1xuICAgIFNjaGVkdWxlci5ub3cgPSBkYXRlVGltZXN0YW1wUHJvdmlkZXIubm93O1xuICAgIHJldHVybiBTY2hlZHVsZXI7XG59KCkpO1xuZXhwb3J0IHsgU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TY2hlZHVsZXIuanMubWFwIiwiaW1wb3J0IHsgQXN5bmNBY3Rpb24gfSBmcm9tICcuL0FzeW5jQWN0aW9uJztcbmltcG9ydCB7IEFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi9Bc3luY1NjaGVkdWxlcic7XG5leHBvcnQgdmFyIGFzeW5jU2NoZWR1bGVyID0gbmV3IEFzeW5jU2NoZWR1bGVyKEFzeW5jQWN0aW9uKTtcbmV4cG9ydCB2YXIgYXN5bmMgPSBhc3luY1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU2NoZWR1bGVyIH0gZnJvbSAnLi4vU2NoZWR1bGVyJztcbnZhciBBc3luY1NjaGVkdWxlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzeW5jU2NoZWR1bGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jU2NoZWR1bGVyKFNjaGVkdWxlckFjdGlvbiwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkgeyBub3cgPSBTY2hlZHVsZXIubm93OyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFNjaGVkdWxlckFjdGlvbiwgbm93KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hY3Rpb25zID0gW107XG4gICAgICAgIF90aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY1NjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICgoZXJyb3IgPSBhY3Rpb24uZXhlY3V0ZShhY3Rpb24uc3RhdGUsIGFjdGlvbi5kZWxheSkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpKTtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jU2NoZWR1bGVyO1xufShTY2hlZHVsZXIpKTtcbmV4cG9ydCB7IEFzeW5jU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY1NjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBhc3luY1NjaGVkdWxlciB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZVRpbWUoZHVlVGltZSwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jU2NoZWR1bGVyOyB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgYWN0aXZlVGFzayA9IG51bGw7XG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICB2YXIgbGFzdFRpbWUgPSBudWxsO1xuICAgICAgICB2YXIgZW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChhY3RpdmVUYXNrKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzay51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIGFjdGl2ZVRhc2sgPSBudWxsO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGxhc3RWYWx1ZTtcbiAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGVtaXRXaGVuSWRsZSgpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRUaW1lID0gbGFzdFRpbWUgKyBkdWVUaW1lO1xuICAgICAgICAgICAgdmFyIG5vdyA9IHNjaGVkdWxlci5ub3coKTtcbiAgICAgICAgICAgIGlmIChub3cgPCB0YXJnZXRUaW1lKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IHRoaXMuc2NoZWR1bGUodW5kZWZpbmVkLCB0YXJnZXRUaW1lIC0gbm93KTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChhY3RpdmVUYXNrKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbWl0KCk7XG4gICAgICAgIH1cbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGxhc3RUaW1lID0gc2NoZWR1bGVyLm5vdygpO1xuICAgICAgICAgICAgaWYgKCFhY3RpdmVUYXNrKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IHNjaGVkdWxlci5zY2hlZHVsZShlbWl0V2hlbklkbGUsIGR1ZVRpbWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGFjdGl2ZVRhc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbWl0KCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGFzdFZhbHVlID0gYWN0aXZlVGFzayA9IG51bGw7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYm91bmNlVGltZS5qcy5tYXAiLCJ2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgZ2V0S2V5cyA9IE9iamVjdC5rZXlzO1xuZXhwb3J0IGZ1bmN0aW9uIGFyZ3NBcmdBcnJheU9yT2JqZWN0KGFyZ3MpIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdmFyIGZpcnN0XzEgPSBhcmdzWzBdO1xuICAgICAgICBpZiAoaXNBcnJheShmaXJzdF8xKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgYXJnczogZmlyc3RfMSwga2V5czogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1BPSk8oZmlyc3RfMSkpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0S2V5cyhmaXJzdF8xKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYXJnczoga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZmlyc3RfMVtrZXldOyB9KSxcbiAgICAgICAgICAgICAgICBrZXlzOiBrZXlzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBhcmdzOiBhcmdzLCBrZXlzOiBudWxsIH07XG59XG5mdW5jdGlvbiBpc1BPSk8ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBnZXRQcm90b3R5cGVPZihvYmopID09PSBvYmplY3RQcm90bztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyZ3NBcmdBcnJheU9yT2JqZWN0LmpzLm1hcCIsImltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9LCBkZWxheSk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSwgZGVsYXkpOyB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlT24uanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7IH0sIGRlbGF5KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVPbi5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSXRlcmFibGUgY2Fubm90IGJlIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGlucHV0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMCwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZWQnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi9pbm5lckZyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikgOiBpbm5lckZyb20oaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZU9ic2VydmFibGUgfSBmcm9tICcuL3NjaGVkdWxlT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZVByb21pc2UgfSBmcm9tICcuL3NjaGVkdWxlUHJvbWlzZSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFycmF5IH0gZnJvbSAnLi9zY2hlZHVsZUFycmF5JztcbmltcG9ydCB7IHNjaGVkdWxlSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlSXRlcmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUFzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi91dGlsL2lzUHJvbWlzZSc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciB9IGZyb20gJy4uL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvcic7XG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UgfSBmcm9tICcuL3NjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZWQuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgb2JzZXJ2ZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL29ic2VydmVPbic7XG5pbXBvcnQgeyBzdWJzY3JpYmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9zdWJzY3JpYmVPbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gaW5uZXJGcm9tKGlucHV0KS5waXBlKHN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbihzY2hlZHVsZXIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlT2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlucHV0W2krK10pO1xuICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFycmF5LmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9ic2VydmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9vYnNlcnZlT24nO1xuaW1wb3J0IHsgc3Vic2NyaWJlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvc3Vic2NyaWJlT24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT24oc2NoZWR1bGVyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVByb21pc2UuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaXRlcmF0b3I7XG4gICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yID0gaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGRvbmU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gaXRlcmF0b3IubmV4dCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMCwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNGdW5jdGlvbihpdGVyYXRvciA9PT0gbnVsbCB8fCBpdGVyYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaXRlcmF0b3IucmV0dXJuKSAmJiBpdGVyYXRvci5yZXR1cm4oKTsgfTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUFzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IoaW5wdXQpLCBzY2hlZHVsZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNTY2hlZHVsZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5zY2hlZHVsZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi9pc1NjaGVkdWxlcic7XG5mdW5jdGlvbiBsYXN0KGFycikge1xuICAgIHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wU2NoZWR1bGVyKGFyZ3MpIHtcbiAgICByZXR1cm4gaXNTY2hlZHVsZXIobGFzdChhcmdzKSkgPyBhcmdzLnBvcCgpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcE51bWJlcihhcmdzLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIGxhc3QoYXJncykgPT09ICdudW1iZXInID8gYXJncy5wb3AoKSA6IGRlZmF1bHRWYWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyZ3MuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgYXJnc0FyZ0FycmF5T3JPYmplY3QgfSBmcm9tICcuLi91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0JztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmltcG9ydCB7IG1hcE9uZU9yTWFueUFyZ3MgfSBmcm9tICcuLi91dGlsL21hcE9uZU9yTWFueUFyZ3MnO1xuaW1wb3J0IHsgcG9wUmVzdWx0U2VsZWN0b3IsIHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBjcmVhdGVPYmplY3QgfSBmcm9tICcuLi91dGlsL2NyZWF0ZU9iamVjdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lTGF0ZXN0KCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyKGFyZ3MpO1xuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgIHZhciBfYSA9IGFyZ3NBcmdBcnJheU9yT2JqZWN0KGFyZ3MpLCBvYnNlcnZhYmxlcyA9IF9hLmFyZ3MsIGtleXMgPSBfYS5rZXlzO1xuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZyb20oW10sIHNjaGVkdWxlcik7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBuZXcgT2JzZXJ2YWJsZShjb21iaW5lTGF0ZXN0SW5pdChvYnNlcnZhYmxlcywgc2NoZWR1bGVyLCBrZXlzXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZXMpIHsgcmV0dXJuIGNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpOyB9XG4gICAgICAgIDpcbiAgICAgICAgICAgIGlkZW50aXR5KSk7XG4gICAgcmV0dXJuIHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0LnBpcGUobWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpIDogcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVMYXRlc3RJbml0KG9ic2VydmFibGVzLCBzY2hlZHVsZXIsIHZhbHVlVHJhbnNmb3JtKSB7XG4gICAgaWYgKHZhbHVlVHJhbnNmb3JtID09PSB2b2lkIDApIHsgdmFsdWVUcmFuc2Zvcm0gPSBpZGVudGl0eTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IG9ic2VydmFibGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBhY3RpdmUgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgcmVtYWluaW5nRmlyc3RWYWx1ZXMgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZyb20ob2JzZXJ2YWJsZXNbaV0sIHNjaGVkdWxlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNGaXJzdFZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0ZpcnN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNGaXJzdFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1haW5pbmdGaXJzdFZhbHVlcy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW1haW5pbmdGaXJzdFZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZVRyYW5zZm9ybSh2YWx1ZXMuc2xpY2UoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSwgc3Vic2NyaWJlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHN1YnNjcmliZXIpO1xuICAgIH07XG59XG5mdW5jdGlvbiBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZXhlY3V0ZSwgc3Vic2NyaXB0aW9uKSB7XG4gICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaXB0aW9uLCBzY2hlZHVsZXIsIGV4ZWN1dGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXhlY3V0ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5LCBpKSB7IHJldHVybiAoKHJlc3VsdFtrZXldID0gdmFsdWVzW2ldKSwgcmVzdWx0KTsgfSwge30pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlT2JqZWN0LmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCB2YXIgRU1QVFkgPSBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTtcbmV4cG9ydCBmdW5jdGlvbiBlbXB0eShzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSA6IEVNUFRZO1xufVxuZnVuY3Rpb24gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbXB0eS5qcy5tYXAiLCJpbXBvcnQgeyBFTVBUWSB9IGZyb20gJy4uL29ic2VydmFibGUvZW1wdHknO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gdGFrZShjb3VudCkge1xuICAgIHJldHVybiBjb3VudCA8PSAwXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIEVNUFRZOyB9XG4gICAgICAgIDogb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgc2VlbiA9IDA7XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoKytzZWVuIDw9IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA8PSBzZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZS5qcy5tYXAiLCJpbXBvcnQgeyBjb25jYXQgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2NvbmNhdCc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAnLi90YWtlJztcbmltcG9ydCB7IGlnbm9yZUVsZW1lbnRzIH0gZnJvbSAnLi9pZ25vcmVFbGVtZW50cyc7XG5pbXBvcnQgeyBtYXBUbyB9IGZyb20gJy4vbWFwVG8nO1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuL21lcmdlTWFwJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBkZWxheVdoZW4oZGVsYXlEdXJhdGlvblNlbGVjdG9yLCBzdWJzY3JpcHRpb25EZWxheSkge1xuICAgIGlmIChzdWJzY3JpcHRpb25EZWxheSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmNhdChzdWJzY3JpcHRpb25EZWxheS5waXBlKHRha2UoMSksIGlnbm9yZUVsZW1lbnRzKCkpLCBzb3VyY2UucGlwZShkZWxheVdoZW4oZGVsYXlEdXJhdGlvblNlbGVjdG9yKSkpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VNYXAoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkgeyByZXR1cm4gaW5uZXJGcm9tKGRlbGF5RHVyYXRpb25TZWxlY3Rvcih2YWx1ZSwgaW5kZXgpKS5waXBlKHRha2UoMSksIG1hcFRvKHZhbHVlKSk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsYXlXaGVuLmpzLm1hcCIsImltcG9ydCB7IGNvbmNhdEFsbCB9IGZyb20gJy4uL29wZXJhdG9ycy9jb25jYXRBbGwnO1xuaW1wb3J0IHsgcG9wU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9hcmdzJztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdEFsbCgpKGZyb20oYXJncywgcG9wU2NoZWR1bGVyKGFyZ3MpKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXQuanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuL21lcmdlTWFwJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VBbGwoY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgcmV0dXJuIG1lcmdlTWFwKGlkZW50aXR5LCBjb25jdXJyZW50KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlQWxsLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlQWxsIH0gZnJvbSAnLi9tZXJnZUFsbCc7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0QWxsKCkge1xuICAgIHJldHVybiBtZXJnZUFsbCgxKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdEFsbC5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlsL25vb3AnO1xuZXhwb3J0IGZ1bmN0aW9uIGlnbm9yZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgbm9vcCkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWdub3JlRWxlbWVudHMuanMubWFwIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvKHZhbHVlKSB7XG4gICAgcmV0dXJuIG1hcChmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBUby5qcy5tYXAiLCJleHBvcnQgY2xhc3MgS29ua3Vyc3tcclxuICAgIGpvYjpzdHJpbmc7XHJcbiAgICBjb21wYW55OnN0cmluZztcclxuICAgIG1vbmV5OnN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHRoaXMuam9iPW51bGw7XHJcbiAgICAgICAgdGhpcy5jb21wYW55PW51bGw7XHJcbiAgICAgICAgdGhpcy5tb25leT1udWxsO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgZ2V0VXNlcktvbmt1cnMsIHBvc3RLb25rdXJzLCBwb3N0UHJpamF2aVNlTmFLb25rdXJzIH0gZnJvbSBcIi4vZGJTZXJ2aWNlc1wiO1xyXG5pbXBvcnQgeyBLb25rdXJzIH0gZnJvbSBcIi4uL2NsYXNzZXMva29ua3Vyc1wiO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uL2NsYXNzZXMvdXNlclwiO1xyXG5pbXBvcnQgeyBkcmF3Vmlld0tvbmt1cnNlIH0gZnJvbSBcIi4vZHJhd0Z1bmN0aW9uc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDaGlsZHJlbihwYXJlbnQ6Tm9kZSxjaGlsZDpOb2RlTGlzdE9mPEVsZW1lbnQ+KXtcclxuICAgIGlmKGNoaWxkIT09bnVsbCl7XHJcbiAgICAgICAgY2hpbGQuZm9yRWFjaCh4PT57XHJcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZCh4KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVTZWFyY2hCYXIoKXtcclxuICAgIGxldCBsaW5rID0gPEhUTUxMaW5rRWxlbWVudD4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImFbaHJlZj0nI3NlYXJjaC1pbnB1dCddXCIpO1xyXG4gICAgbGluay5vbmNsaWNrPSgpPT57XHJcbiAgICAgICAgbGV0IGRpdiA9IDxIVE1MRGl2RWxlbWVudD4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWFyY2gtYmFyLWRyb3Bkb3duLXNob3dcIik7XHJcbiAgICAgICAgZGl2LmNsYXNzTGlzdC50b2dnbGUoXCJoaWRlRGlzcGxheVwiKTtcclxuICAgICAgICByZW1vdmVTZWFyY2hCYXJSZWNlcHRzKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoaWRlU2VhcmNoQmFyKCl7XHJcbiAgICBsZXQgZGl2ID0gPEhUTUxEaXZFbGVtZW50PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NlYXJjaC1iYXItZHJvcGRvd24tc2hvd1wiKTtcclxuICAgIGRpdi5jbGFzc0xpc3QudG9nZ2xlKFwiaGlkZURpc3BsYXlcIix0cnVlKTtcclxuICAgIHJlbW92ZVNlYXJjaEJhclJlY2VwdHMoKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVTZWFyY2hCYXJSZWNlcHRzKCl7XHJcbiAgICBsZXQgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWFyY2gtYmFyLWRyb3Bkb3duLXNob3dcIik7XHJcbiAgICBsZXQgY2hpbGRyZW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmRpdlNlYXJjaFNpbmdsZVJlY2VwdFwiKTtcclxuICAgIGlmKGNoaWxkcmVuLmxlbmd0aD4wKXtcclxuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGNoaWxkPT5wYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpKTtcclxuICAgIH0gXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGROZXdLb25rdXJzRXZlbnQoKXtcclxuXHJcbiAgICBsZXQgYnV0dG9uID0gKDxIVE1MQnV0dG9uRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25ld0tvbmt1cnNCdXR0b25cIikpO1xyXG5cclxuICAgIGJ1dHRvbi5vbmNsaWNrPSgpPT57XHJcbiAgICAgICAgbGV0IGpvYklucHV0ID0gKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjam9iSW5wdXRcIikpLnZhbHVlO1xyXG4gICAgICAgIGxldCBtb25leUlucHV0ID0gKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9uZXlJbnB1dFwiKSkudmFsdWU7XHJcbiAgICAgICAgY29uc29sZS5sb2coam9iSW5wdXQsbW9uZXlJbnB1dCk7XHJcbiAgICAgICAgaWYoam9iSW5wdXQ9PT1cIlwiIHx8IG1vbmV5SW5wdXQ9PT1cIlwiKXtcclxuICAgICAgICAgICAgYWxlcnQoXCJVbmVzaXRlIHN2YSBwb2xqYS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGxldCBrb25rdXJzID0gbmV3IEtvbmt1cnMoKTtcclxuICAgICAgICAgICAga29ua3Vycy5qb2I9am9iSW5wdXQ7XHJcbiAgICAgICAgICAgIGtvbmt1cnMubW9uZXk9bW9uZXlJbnB1dDtcclxuICAgICAgICAgICAga29ua3Vycy5jb21wYW55PUpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImN1cnJlbnQtdXNlclwiKSkubmFtZTtcclxuICAgICAgICAgICAgcG9zdEtvbmt1cnMoa29ua3VycylcclxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUobmV4dD0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFuZXh0LnZhbGlkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQobmV4dC5tc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChuZXh0Lm1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkVXNlcktvbmt1cnNFdmVudChidXR0b246SFRNTEJ1dHRvbkVsZW1lbnQsdXNlcjpVc2VyLGtvbmt1cnM6S29ua3Vycyl7XHJcbiAgICBidXR0b24ub25jbGljaz0oKT0+e1xyXG4gICAgICAgIHBvc3RQcmlqYXZpU2VOYUtvbmt1cnModXNlcixrb25rdXJzKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKG5leHQ9PntcclxuICAgICAgICAgICAgICAgIGlmKG5leHQudmFsaWQpe1xyXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KG5leHQubXNnKTtcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQobmV4dC5tc2cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdmlld1VzZXJLb25rdXJzKCl7XHJcbiAgICBsZXQgcGFyZW50ID0gPEhUTUxFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWlkZGxlXCIpO1xyXG4gICAgY29uc29sZS5sb2coSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiY3VycmVudC11c2VyXCIpKS5za2lsbHMpO1xyXG4gICAgZ2V0VXNlcktvbmt1cnMoKEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImN1cnJlbnQtdXNlclwiKSkuc2tpbGxzKSlcclxuICAgICAgICAuc3Vic2NyaWJlKG5leHQ9PntcclxuICAgICAgICAgICAgZHJhd1ZpZXdLb25rdXJzZShwYXJlbnQsbmV4dCk7XHJcbiAgICAgICAgfSk7XHJcbn0iLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCB0YWtlLCB0YWtlTGFzdCwgbWFwLCB0b0FycmF5LCBtZXJnZU1hcCwgZmlsdGVyLCBvZiB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vY2xhc3Nlcy91c2VyXCI7XHJcbmltcG9ydCB7IHJlbW92ZUNoaWxkcmVuIH0gZnJvbSBcIi4vcG9jZXRuYUV2ZW50c1wiO1xyXG5pbXBvcnQgeyBrb25rdXJzVVJMLCBwcmlqYXZpTmFLb25rdXJzVVJMLCB1c2VyS29ua3Vyc1VSTCwgdXNlclVSTCB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBLb21wYW5pamEgfSBmcm9tIFwiLi4vY2xhc3Nlcy9rb21wYW5pamFcIjtcclxuaW1wb3J0IHsgS29ua3VycyB9IGZyb20gXCIuLi9jbGFzc2VzL2tvbmt1cnNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwb3N0VXNlcih1c2VyOmFueSxsYWJlbDpzdHJpbmcpIDogT2JzZXJ2YWJsZTxib29sZWFuIHwgdm9pZD57XHJcbiAgICAvLyBjb25zb2xlLmxvZyh1c2VyKTtcclxuICAgIGxldCBmb3JtQm9keSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcclxuICAgIGlmKGxhYmVsPT09XCJLT1JJU05JS1wiKXtcclxuICAgICAgICBmb3JtQm9keS5hcHBlbmQoJ25hbWUnLHVzZXIubmFtZSk7XHJcbiAgICAgICAgZm9ybUJvZHkuYXBwZW5kKCdsYXN0bmFtZScsdXNlci5sYXN0bmFtZSk7XHJcbiAgICAgICAgZm9ybUJvZHkuYXBwZW5kKCdlbWFpbCcsdXNlci5lbWFpbCk7XHJcbiAgICAgICAgZm9ybUJvZHkuYXBwZW5kKCdwYXNzd29yZCcsdXNlci5wYXNzd29yZCk7XHJcbiAgICAgICAgZm9ybUJvZHkuYXBwZW5kKCdza2lsbHMnLHVzZXIuc2tpbGxzKTtcclxuICAgICAgICBmb3JtQm9keS5hcHBlbmQoJ3VzZXJDVicsdXNlci51c2VyQ1YpO1xyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgICAgICBmb3JtQm9keS5hcHBlbmQoJ25hbWUnLHVzZXIubmFtZSk7XHJcbiAgICAgICAgZm9ybUJvZHkuYXBwZW5kKCdjaXR5Jyx1c2VyLmNpdHkpO1xyXG4gICAgICAgIGZvcm1Cb2R5LmFwcGVuZCgnZW1haWwnLHVzZXIuZW1haWwpO1xyXG4gICAgICAgIGZvcm1Cb2R5LmFwcGVuZCgncGFzc3dvcmQnLHVzZXIucGFzc3dvcmQpO1xyXG4gICAgICAgIGZvcm1Cb2R5LmFwcGVuZCgnZGVzY3JpcHRpb24nLHVzZXIuZGVzY3JpcHRpb24pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzcD1mZXRjaCh1c2VyVVJMK1wiP2xhYmVsPVwiK2xhYmVsLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDpcIlBPU1RcIixcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBib2R5OiBmb3JtQm9keVxyXG4gICAgICAgICAgICAgICAgfSkudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFyZXNwb25zZS5vayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnI9PmNvbnNvbGUubG9nKGVycikpO1xyXG5cclxuICAgIHJldHVybiBmcm9tKHJlc3ApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlcihlbWFpbDpzdHJpbmcsbGFiZWw6c3RyaW5nKSA6IE9ic2VydmFibGU8VXNlcj57XHJcbiAgICBjb25zdCB1c2VyID0gZmV0Y2godXNlclVSTCtcIj9lbWFpbD1cIitlbWFpbCtcIiZsYWJlbD1cIitsYWJlbCx7bWV0aG9kOlwiR0VUXCJ9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFyZXNwb25zZS5vayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycj0+Y29uc29sZS5sb2coZXJyKSk7XHJcbiAgICBcclxuICAgIHJldHVybiBmcm9tKHVzZXIpLnBpcGUodGFrZSgxKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyV2l0aEVtYWlsKGVtYWlsOnN0cmluZyxsYWJlbDpzdHJpbmcpIDogT2JzZXJ2YWJsZTx2b2lkIHwgYm9vbGVhbj57XHJcbiAgICBjb25zdCB1c2VyID0gZmV0Y2godXNlclVSTCtcIj9lbWFpbD1cIitlbWFpbCtcIiZsYWJlbD1cIitsYWJlbCx7bWV0aG9kOlwiR0VUXCJ9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFyZXNwb25zZS5vayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyPT5jb25zb2xlLmxvZyhlcnIpKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZyb20odXNlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQoZW1haWw6c3RyaW5nLHBhc3N3b3JkOnN0cmluZykgOiBPYnNlcnZhYmxlPGFueT57XHJcbiAgICBjb25zdCB1c2VyID0gZmV0Y2godXNlclVSTCtcIj9lbWFpbD1cIitlbWFpbCtcIiZwYXNzd29yZD1cIitwYXNzd29yZCx7bWV0aG9kOlwiR0VUXCJ9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFyZXNwb25zZS5vayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycj0+Y29uc29sZS5sb2coZXJyKSk7XHJcbiAgICBcclxuICAgIHJldHVybiBmcm9tKHVzZXIpO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVVzZXIoZW1haWw6c3RyaW5nLGxhYmVsOnN0cmluZykgOiBPYnNlcnZhYmxlPHN0cmluZz57XHJcbiAgICBjb25zdCB1c2VyUmVzcCA9IGZldGNoKHVzZXJVUkwrXCI/ZW1haWw9XCIrZW1haWwrXCImbGFiZWw9XCIrbGFiZWwse21ldGhvZDpcIkRFTEVURVwifSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighcmVzcG9uc2Uub2spe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnI9PmNvbnNvbGUubG9nKGVycikpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gZnJvbSh1c2VyUmVzcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwb3N0S29ua3VycyhuZXdLb25rdXJzOktvbmt1cnMpIDogT2JzZXJ2YWJsZTxEYlJlc3BvbnNlPntcclxuICAgIGxldCBmb3JtQm9keSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcclxuICAgIGZvcm1Cb2R5LmFwcGVuZCgnam9iJyxuZXdLb25rdXJzLmpvYik7XHJcbiAgICBmb3JtQm9keS5hcHBlbmQoJ2NvbXBhbnknLG5ld0tvbmt1cnMuY29tcGFueSk7XHJcbiAgICBmb3JtQm9keS5hcHBlbmQoJ21vbmV5JyxuZXdLb25rdXJzLm1vbmV5KTtcclxuXHJcbiAgICBjb25zdCByZXNwID0gZmV0Y2goa29ua3Vyc1VSTCx7XHJcbiAgICAgICAgbWV0aG9kOlwiUE9TVFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIGJvZHk6IGZvcm1Cb2R5XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICB9KS5jYXRjaChlcnI9PmNvbnNvbGUubG9nKGVycikpO1xyXG5cclxuICAgIHJldHVybiBmcm9tKHJlc3ApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlcktvbmt1cnMoc2tpbGxzOnN0cmluZykgOiBPYnNlcnZhYmxlPEtvbmt1cnNbXT57XHJcbiAgICBjb25zdCB1c2VyID0gZmV0Y2godXNlcktvbmt1cnNVUkwrXCI/c2tpbGxzPVwiK3NraWxscy50b0xvd2VyQ2FzZSgpLHttZXRob2Q6XCJHRVRcIn0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2U9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXJlc3BvbnNlLm9rKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyPT5jb25zb2xlLmxvZyhlcnIpKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZyb20odXNlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwb3N0UHJpamF2aVNlTmFLb25rdXJzKHVzZXI6VXNlcixrb25rdXJzOktvbmt1cnMpIDogT2JzZXJ2YWJsZTxEYlJlc3BvbnNlPntcclxuICAgIGxldCBmb3JtQm9keSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcclxuICAgIGZvcm1Cb2R5LmFwcGVuZCgnam9iJyxrb25rdXJzLmpvYik7XHJcbiAgICBmb3JtQm9keS5hcHBlbmQoJ2NvbXBhbnknLGtvbmt1cnMuY29tcGFueSk7XHJcbiAgICBmb3JtQm9keS5hcHBlbmQoJ21vbmV5Jyxrb25rdXJzLm1vbmV5KTtcclxuICAgIGZvcm1Cb2R5LmFwcGVuZCgndXNlckNWJyx1c2VyLnVzZXJDVik7XHJcblxyXG4gICAgY29uc3QgcmVzcCA9IGZldGNoKHByaWphdmlOYUtvbmt1cnNVUkwrXCI/ZW1haWw9XCIrdXNlci5lbWFpbCx7XHJcbiAgICAgICAgbWV0aG9kOlwiUE9TVFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIGJvZHk6IGZvcm1Cb2R5XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIH0pLmNhdGNoKGVycj0+Y29uc29sZS5sb2coZXJyKSk7XHJcblxyXG4gICAgcmV0dXJuIGZyb20ocmVzcCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dFcnJvcihlcnJvcjphbnkpe1xyXG4gICAgbGV0IHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWlkZGxlXCIpO1xyXG4gICAgcmVtb3ZlQ2hpbGRyZW4ocGFyZW50LGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWlkZGxlID4gZGl2XCIpKTtcclxuICAgIGxldCBkaXZFcnJvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZFcnJvci5jbGFzc0xpc3QuYWRkKFwiZGl2RXJyb3JcIik7XHJcbiAgICBsZXQgbGFiZWxFcnJvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsRXJyb3Iuc3R5bGUuZm9udFNpemU9XCJsYXJnZXJcIjtcclxuICAgIGxhYmVsRXJyb3IuaW5uZXJIVE1MPWVycm9yLnRvU3RyaW5nKCk7XHJcbiAgICBsYWJlbEVycm9yLmlubmVySFRNTCA9IGxhYmVsRXJyb3IuaW5uZXJIVE1MLmNvbmNhdChcIi4gRXJyb3IgNDA0LlwiKTtcclxuICAgIGRpdkVycm9yLmFwcGVuZENoaWxkKGxhYmVsRXJyb3IpO1xyXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGRpdkVycm9yKTtcclxufSIsImltcG9ydCB7IGdldFVzZXJXaXRoRW1haWwsIGdldFVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCwgcG9zdFVzZXIgfSBmcm9tIFwiLi9kYlNlcnZpY2VzXCI7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vY2xhc3Nlcy91c2VyXCI7XHJcbmltcG9ydCB7IGZpbHRlcixTdWJqZWN0IH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgc2V0VXBMb2dpbiB9IGZyb20gXCIuL2xvZ2luRXZlbnRzXCI7XHJcbmltcG9ydCB7IHNldFVwU2lnbmluIH0gZnJvbSBcIi4vc2lnbnVwRXZlbnRzXCI7XHJcbmltcG9ydCB7ICBhZGROZXdLb25rdXJzRXZlbnQsIGFkZFVzZXJLb25rdXJzRXZlbnQsIHJlbW92ZUNoaWxkcmVuIH0gZnJvbSBcIi4vcG9jZXRuYUV2ZW50c1wiO1xyXG5pbXBvcnQgeyBLb21wYW5pamEgfSBmcm9tIFwiLi4vY2xhc3Nlcy9rb21wYW5pamFcIjtcclxuaW1wb3J0IHsgS29ua3VycyB9IGZyb20gXCIuLi9jbGFzc2VzL2tvbmt1cnNcIjtcclxuXHJcbmZ1bmN0aW9uIGFkZExpbmtUb0NsYXNzRWxlbWVudChjbGFzc19lbGVtZW50OnN0cmluZyxocmVmOnN0cmluZyxjbGFzc19uYW1lOnN0cmluZyx0ZXh0OnN0cmluZyxpZF92YWx1ZTpzdHJpbmc9bnVsbCkgOiB2b2lke1xyXG4gICAgY29uc3QgbGluaz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgIGxpbmsuaHJlZj1ocmVmO1xyXG4gICAgbGluay5jbGFzc0xpc3QuYWRkKGNsYXNzX25hbWUpO1xyXG4gICAgbGluay5pbm5lckhUTUw9dGV4dDtcclxuXHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjbGFzc19lbGVtZW50KTtcclxuICAgIGlmKGxpbmshPT1udWxsICYmIGVsZW1lbnQhPT1udWxsKXtcclxuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGxpbmspO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVMaW5rRnJvbUNsYXNzRWxlbWVudChjbGFzc19lbGVtZW50OnN0cmluZyxsaW5rX2hyZWY6c3RyaW5nKSA6IHZvaWR7XHJcbiAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImFbaHJlZj0nXCIrbGlua19ocmVmK1wiJ11cIik7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjbGFzc19lbGVtZW50KTtcclxuICAgIGlmKGxpbmshPT1udWxsICYmIGVsZW1lbnQhPT1udWxsKXtcclxuICAgICAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGxpbmspO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VyRmlsdGVyKCl7XHJcbiAgICBsZXQgY3VycmVudFVzZXIgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJjdXJyZW50LXVzZXJcIikpO1xyXG4gICAgbGV0IGN1cnJlbnRVc2VyTGFiZWwgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiY3VycmVudC11c2VyLWxhYmVsXCIpO1xyXG5cclxuICAgIGlmKGN1cnJlbnRVc2VyIT09bnVsbCl7XHJcbiAgICAgICAgaWYoY3VycmVudFVzZXJMYWJlbD09PVwiS09NUEFOSUpBXCIpe1xyXG4gICAgICAgICAgICBhZGRMaW5rVG9DbGFzc0VsZW1lbnQoXCIuaGVhZGVyXCIsXCIjbm92aS1rb25rdXJzXCIsXCJoZWFkZXItaXRlbVwiLFwiTk9WSSBLT05LVVJTXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhZGRMaW5rVG9DbGFzc0VsZW1lbnQoXCIuaGVhZGVyXCIsXCIjcHJvZmlsXCIsXCJoZWFkZXItaXRlbVwiLFwiUFJPRklMXCIpO1xyXG4gICAgICAgIGFkZExpbmtUb0NsYXNzRWxlbWVudChcIi5oZWFkZXJcIixcIiNvZGphdmktc2VcIixcImhlYWRlci1pdGVtXCIsXCJPREpBVkkgU0VcIik7XHJcbiAgICAgICAgcmVtb3ZlTGlua0Zyb21DbGFzc0VsZW1lbnQoXCIuaGVhZGVyXCIsXCIjcHJpamF2aS1zZVwiKTtcclxuICAgICAgICByZW1vdmVMaW5rRnJvbUNsYXNzRWxlbWVudChcIi5oZWFkZXJcIixcIiNrcmVpcmFqLW5hbG9nXCIpO1xyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgICAgICBhZGRMaW5rVG9DbGFzc0VsZW1lbnQoXCIuaGVhZGVyXCIsXCIjcHJpamF2aS1zZVwiLFwiaGVhZGVyLWl0ZW1cIixcIlBSSUpBVkkgU0VcIik7XHJcbiAgICAgICAgYWRkTGlua1RvQ2xhc3NFbGVtZW50KFwiLmhlYWRlclwiLFwiI2tyZWlyYWotbmFsb2dcIixcImhlYWRlci1pdGVtXCIsXCJLUkVJUkFKIE5BTE9HXCIpO1xyXG4gICAgICAgIHJlbW92ZUxpbmtGcm9tQ2xhc3NFbGVtZW50KFwiLmhlYWRlclwiLFwiI3Byb2ZpbFwiKTtcclxuICAgICAgICByZW1vdmVMaW5rRnJvbUNsYXNzRWxlbWVudChcIi5oZWFkZXJcIixcIiNvZGphdmktc2VcIik7XHJcbiAgICAgICAgaWYoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImFbaHJlZj0nI25vdmkta29ua3VycyddXCIpIT09dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgcmVtb3ZlTGlua0Zyb21DbGFzc0VsZW1lbnQoXCIuaGVhZGVyXCIsXCIjbm92aS1yZWNlcHRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGtyZWlyYWpfbmFsb2cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYVtocmVmPScja3JlaXJhai1uYWxvZyddXCIpO1xyXG4gICAgY29uc3QgY29udHJvbCQgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XHJcbiAgICBpZihrcmVpcmFqX25hbG9nIT09bnVsbCl7XHJcbiAgICAgICAga3JlaXJhal9uYWxvZy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKT0+e1xyXG4gICAgICAgICAgICByZW1vdmVDaGlsZHJlbihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1pZGRsZVwiKSxkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1pZGRsZSA+IGRpdlwiKSk7XHJcbiAgICAgICAgICAgIGRyYXdTaWdudXAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIikpO1xyXG4gICAgICAgICAgICBzZXRVcFNpZ25pbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHByaWphdmlfc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYVtocmVmPScjcHJpamF2aS1zZSddXCIpO1xyXG4gICAgY29uc3QgbG9naW4kID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xyXG4gICAgaWYocHJpamF2aV9zZSE9PW51bGwpe1xyXG5cclxuICAgICAgICBwcmlqYXZpX3NlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCgpPT57XHJcbiAgICAgICAgICAgIHJlbW92ZUNoaWxkcmVuKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWlkZGxlXCIpLGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWlkZGxlID4gZGl2XCIpKTtcclxuICAgICAgICAgICAgZHJhd0xvZ2luKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWlkZGxlXCIpKTtcclxuICAgICAgICAgICAgc2V0VXBMb2dpbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9kamF2aV9zZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhW2hyZWY9JyNvZGphdmktc2UnXVwiKTtcclxuICAgIGlmKG9kamF2aV9zZSE9PW51bGwpe1xyXG5cclxuICAgICAgICBvZGphdmlfc2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKCk9PntcclxuICAgICAgICAgICAgcmVtb3ZlQ2hpbGRyZW4oZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIiksZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5taWRkbGUgPiBkaXZcIikpO1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFwiY3VycmVudC11c2VyXCIpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwcm9maWwgPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImFbaHJlZj0nI3Byb2ZpbCddXCIpO1xyXG4gICAgaWYocHJvZmlsIT09bnVsbCl7XHJcbiAgICAgICAgcHJvZmlsLm9uY2xpY2s9KCk9PntcclxuICAgICAgICAgICAgZHJhd1VzZXJQcm9maWxlKGN1cnJlbnRVc2VyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgbm92aUtvbmt1cnMgPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImFbaHJlZj0nI25vdmkta29ua3VycyddXCIpO1xyXG4gICAgaWYobm92aUtvbmt1cnMhPT1udWxsKXtcclxuICAgICAgICBub3ZpS29ua3Vycy5vbmNsaWNrPSgpPT57XHJcbiAgICAgICAgICAgIHJlbW92ZUNoaWxkcmVuKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWlkZGxlXCIpLGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWlkZGxlID4gZGl2XCIpKTtcclxuICAgICAgICAgICAgZHJhd05ld0tvbmt1cnMoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIikpO1xyXG4gICAgICAgICAgICBhZGROZXdLb25rdXJzRXZlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3U2lnbnVwKHBhcmVudF9ub2RlOkhUTUxFbGVtZW50KXtcclxuXHJcbiAgICBjb25zdCBzZWxlY3REaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgc2VsZWN0RGl2LmNsYXNzTGlzdC5hZGQoXCJzZWxlY3REaXZcIik7XHJcblxyXG4gICAgbGV0IGNob29zZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgY2hvb3NlTGFiZWwuY2xhc3NMaXN0LmFkZChcImNob29zZUxhYmVsXCIpO1xyXG4gICAgY2hvb3NlTGFiZWwuaW5uZXJIVE1MPVwiSXphYmVyaXRlIHVsb2d1OlwiO1xyXG4gICAgc2VsZWN0RGl2LmFwcGVuZENoaWxkKGNob29zZUxhYmVsKTtcclxuXHJcbiAgICBsZXQgY2hvb3NlU2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcclxuICAgIGNob29zZVNlbGVjdC5jbGFzc0xpc3QuYWRkKFwiY2hvb3NlU2VsZWN0XCIpO1xyXG4gICAgY2hvb3NlU2VsZWN0LmlkPVwiY2hvb3NlU2VsZWN0XCI7XHJcbiAgICBcclxuICAgIGxldCBzZWxPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG4gICAgc2VsT3B0aW9uLmlubmVySFRNTD1cIlwiO1xyXG4gICAgc2VsT3B0aW9uLnZhbHVlPVwiXCI7XHJcbiAgICBzZWxPcHRpb24uc2VsZWN0ZWQ9dHJ1ZTtcclxuICAgIGNob29zZVNlbGVjdC5hcHBlbmRDaGlsZChzZWxPcHRpb24pO1xyXG5cclxuICAgIHNlbE9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XHJcbiAgICBzZWxPcHRpb24uaW5uZXJIVE1MPVwiS09SSVNOSUtcIjtcclxuICAgIHNlbE9wdGlvbi52YWx1ZT1cIktPUklTTklLXCI7XHJcbiAgICBjaG9vc2VTZWxlY3QuYXBwZW5kQ2hpbGQoc2VsT3B0aW9uKTtcclxuICAgIFxyXG4gICAgc2VsT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcclxuICAgIHNlbE9wdGlvbi5pbm5lckhUTUwgPSBcIktPTVBBTklKQVwiO1xyXG4gICAgc2VsT3B0aW9uLnZhbHVlPVwiS09NUEFOSUpBXCI7XHJcbiAgICBjaG9vc2VTZWxlY3QuYXBwZW5kQ2hpbGQoc2VsT3B0aW9uKTtcclxuICAgIHNlbGVjdERpdi5hcHBlbmRDaGlsZChjaG9vc2VTZWxlY3QpO1xyXG4gICAgcGFyZW50X25vZGUuYXBwZW5kQ2hpbGQoc2VsZWN0RGl2KTtcclxuXHJcbiAgICAvL3Jlc3Qgb2Ygc2lnbnVwXHJcbiAgICBjb25zdCBkaXZTaWdudXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2U2lnbnVwLmNsYXNzTGlzdC5hZGQoXCJkaXZTaWdudXBcIik7XHJcblxyXG4gICAgLy9kaXZTaWdudXAgemEga29yaXNuaWthIGlsaSBrb21wYW5panVcclxuICAgIHNlbGVjdERpdi5vbmNoYW5nZT0oKT0+e1xyXG4gICAgICAgIGxldCBzZWxlY3RWYWx1ZSA9ICg8SFRNTFNlbGVjdEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjaG9vc2VTZWxlY3RcIikpLnZhbHVlO1xyXG4gICAgICAgIHJlbW92ZUNoaWxkcmVuKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZGl2U2lnbnVwXCIpLGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZGl2U2lnbnVwID4gZGl2XCIpKTtcclxuICAgICAgICBpZihzZWxlY3RWYWx1ZT09PVwiS09SSVNOSUtcIil7XHJcbiAgICAgICAgICAgIGRyYXdTaWdudXBLb3Jpc25payhkaXZTaWdudXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihzZWxlY3RWYWx1ZT09PVwiS09NUEFOSUpBXCIpe1xyXG4gICAgICAgICAgICBkcmF3U2lnbnVwS29tcGFuaWphKGRpdlNpZ251cCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwYXJlbnRfbm9kZS5hcHBlbmRDaGlsZChkaXZTaWdudXApO1xyXG5cclxuICAgIGxldCBkaXZTaWdudXBCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2U2lnbnVwQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJkaXZTaWdudXBCdXR0b25cIik7XHJcblxyXG4gICAgLy9vZHZvaml0aSB1IGxvZ2luRXZlbnRzLnRzIGkgZG9kYXRpIGV2ZW50IG5hIGJ1dHRvblxyXG4gICAgbGV0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZChcInNpZ251cEJ1dHRvblwiKTtcclxuICAgIGJ1dHRvbi5pbm5lckhUTUw9XCJLcmVpcmFqXCI7XHJcbiAgICBkaXZTaWdudXBCdXR0b24uYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuICAgIHBhcmVudF9ub2RlLmFwcGVuZENoaWxkKGRpdlNpZ251cEJ1dHRvbik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3U2lnbnVwS29yaXNuaWsocGFyZW50X25vZGU6SFRNTEVsZW1lbnQpe1xyXG4gICAgY29uc3QgZGl2U2lnbnVwTGFiZWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlNpZ251cExhYmVscy5jbGFzc0xpc3QuYWRkKFwiZGl2U2lnbnVwTGFiZWxzXCIpO1xyXG5cclxuICAgIGxldCBuYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBuYW1lTGFiZWwuaW5uZXJIVE1MPVwiSW1lOlwiO1xyXG4gICAgZGl2U2lnbnVwTGFiZWxzLmFwcGVuZENoaWxkKG5hbWVMYWJlbCk7XHJcblxyXG4gICAgbGV0IGxuYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsbmFtZUxhYmVsLmlubmVySFRNTD1cIlByZXppbWU6XCI7XHJcbiAgICBkaXZTaWdudXBMYWJlbHMuYXBwZW5kQ2hpbGQobG5hbWVMYWJlbCk7XHJcblxyXG4gICAgbGV0IGVtYWlsTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBlbWFpbExhYmVsLmlubmVySFRNTD1cIkUtbWFpbDpcIjtcclxuICAgIGRpdlNpZ251cExhYmVscy5hcHBlbmRDaGlsZChlbWFpbExhYmVsKTtcclxuXHJcbiAgICBsZXQgcGFzc3dvcmRMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIHBhc3N3b3JkTGFiZWwuaW5uZXJIVE1MPVwiTG96aW5rYTpcIjtcclxuICAgIGRpdlNpZ251cExhYmVscy5hcHBlbmRDaGlsZChwYXNzd29yZExhYmVsKTtcclxuXHJcbiAgICBsZXQgc2tpbGxzTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBza2lsbHNMYWJlbC5pbm5lckhUTUw9XCJPYmxhc3QgcmFkYTpcIjtcclxuICAgIGRpdlNpZ251cExhYmVscy5hcHBlbmRDaGlsZChza2lsbHNMYWJlbCk7XHJcblxyXG4gICAgbGV0IHVzZXJjdkxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgdXNlcmN2TGFiZWwuaW5uZXJIVE1MPVwiTmFwaXNpdGUgdmFzIENWOlwiO1xyXG4gICAgZGl2U2lnbnVwTGFiZWxzLmFwcGVuZENoaWxkKHVzZXJjdkxhYmVsKTtcclxuXHJcbiAgICBwYXJlbnRfbm9kZS5hcHBlbmRDaGlsZChkaXZTaWdudXBMYWJlbHMpO1xyXG5cclxuICAgIC8vZGl2U2lnbnVwIGlucHV0c1xyXG5cclxuICAgIGxldCBkaXZTaWdudXBJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZTaWdudXBJbnB1dC5jbGFzc0xpc3QuYWRkKFwiZGl2U2lnbnVwSW5wdXRcIik7XHJcblxyXG4gICAgbGV0IG5hbWVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIG5hbWVJbnB1dC5pZD1cInNpZ251cC1uYW1lXCI7XHJcbiAgICBuYW1lSW5wdXQudHlwZSA9IFwibmFtZVwiO1xyXG4gICAgZGl2U2lnbnVwSW5wdXQuYXBwZW5kQ2hpbGQobmFtZUlucHV0KTtcclxuXHJcbiAgICBsZXQgbG5hbWVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGxuYW1lSW5wdXQuaWQ9XCJzaWdudXAtbGFzdG5hbWVcIjtcclxuICAgIGxuYW1lSW5wdXQudHlwZSA9IFwibmFtZVwiO1xyXG4gICAgZGl2U2lnbnVwSW5wdXQuYXBwZW5kQ2hpbGQobG5hbWVJbnB1dCk7XHJcblxyXG4gICAgbGV0IGVtYWlsSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBlbWFpbElucHV0LmlkPVwic2lnbnVwLWVtYWlsXCI7XHJcbiAgICBlbWFpbElucHV0LnR5cGUgPSBcImVtYWlsXCI7XHJcbiAgICBkaXZTaWdudXBJbnB1dC5hcHBlbmRDaGlsZChlbWFpbElucHV0KTtcclxuXHJcbiAgICBsZXQgcGFzc3dvcmRJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIHBhc3N3b3JkSW5wdXQuaWQ9XCJzaWdudXAtcGFzc3dvcmRcIjtcclxuICAgIHBhc3N3b3JkSW5wdXQudHlwZSA9IFwicGFzc3dvcmRcIjtcclxuICAgIGRpdlNpZ251cElucHV0LmFwcGVuZENoaWxkKHBhc3N3b3JkSW5wdXQpO1xyXG5cclxuICAgIGxldCBza2lsbHNJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIHNraWxsc0lucHV0LmlkPVwic2lnbnVwLXNraWxsc1wiO1xyXG4gICAgc2tpbGxzSW5wdXQudHlwZSA9IFwibmFtZVwiO1xyXG4gICAgZGl2U2lnbnVwSW5wdXQuYXBwZW5kQ2hpbGQoc2tpbGxzSW5wdXQpO1xyXG5cclxuICAgIGxldCBjdklucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xyXG4gICAgY3ZJbnB1dC5pZD1cInNpZ251cC11c2VyY3ZcIjtcclxuICAgIGN2SW5wdXQucm93cz0xMjtcclxuICAgIGN2SW5wdXQuY29scz0zNjtcclxuICAgIGRpdlNpZ251cElucHV0LmFwcGVuZENoaWxkKGN2SW5wdXQpO1xyXG5cclxuICAgIHBhcmVudF9ub2RlLmFwcGVuZENoaWxkKGRpdlNpZ251cElucHV0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdTaWdudXBLb21wYW5pamEocGFyZW50X25vZGU6SFRNTEVsZW1lbnQpe1xyXG4gICAgY29uc3QgZGl2U2lnbnVwTGFiZWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlNpZ251cExhYmVscy5jbGFzc0xpc3QuYWRkKFwiZGl2U2lnbnVwTGFiZWxzXCIpO1xyXG5cclxuICAgIGxldCBuYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBuYW1lTGFiZWwuaW5uZXJIVE1MPVwiTmF6aXY6XCI7XHJcbiAgICBkaXZTaWdudXBMYWJlbHMuYXBwZW5kQ2hpbGQobmFtZUxhYmVsKTtcclxuXHJcbiAgICBsZXQgY2l0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgY2l0eUxhYmVsLmlubmVySFRNTD1cIkdyYWQ6XCI7XHJcbiAgICBkaXZTaWdudXBMYWJlbHMuYXBwZW5kQ2hpbGQoY2l0eUxhYmVsKTtcclxuXHJcbiAgICBsZXQgZW1haWxMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGVtYWlsTGFiZWwuaW5uZXJIVE1MPVwiRS1tYWlsOlwiO1xyXG4gICAgZGl2U2lnbnVwTGFiZWxzLmFwcGVuZENoaWxkKGVtYWlsTGFiZWwpO1xyXG5cclxuICAgIGxldCBwYXNzd29yZExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgcGFzc3dvcmRMYWJlbC5pbm5lckhUTUw9XCJMb3ppbmthOlwiO1xyXG4gICAgZGl2U2lnbnVwTGFiZWxzLmFwcGVuZENoaWxkKHBhc3N3b3JkTGFiZWwpO1xyXG5cclxuICAgIGxldCBkZXNjcmlwdGlvbkxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgZGVzY3JpcHRpb25MYWJlbC5pbm5lckhUTUw9XCJPcGlzaXRlIGtvbXBhbmlqdTpcIjtcclxuICAgIGRpdlNpZ251cExhYmVscy5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbkxhYmVsKTtcclxuXHJcbiAgICBwYXJlbnRfbm9kZS5hcHBlbmRDaGlsZChkaXZTaWdudXBMYWJlbHMpO1xyXG5cclxuICAgIC8vZGl2U2lnbnVwIGlucHV0c1xyXG5cclxuICAgIGxldCBkaXZTaWdudXBJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZTaWdudXBJbnB1dC5jbGFzc0xpc3QuYWRkKFwiZGl2U2lnbnVwSW5wdXRcIik7XHJcblxyXG4gICAgbGV0IG5hbWVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIG5hbWVJbnB1dC5pZD1cInNpZ251cC1uYW1lXCI7XHJcbiAgICBuYW1lSW5wdXQudHlwZSA9IFwibmFtZVwiO1xyXG4gICAgZGl2U2lnbnVwSW5wdXQuYXBwZW5kQ2hpbGQobmFtZUlucHV0KTtcclxuXHJcbiAgICBsZXQgY2l0eUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgY2l0eUlucHV0LmlkPVwic2lnbnVwLWNpdHlcIjtcclxuICAgIGNpdHlJbnB1dC50eXBlID0gXCJuYW1lXCI7XHJcbiAgICBkaXZTaWdudXBJbnB1dC5hcHBlbmRDaGlsZChjaXR5SW5wdXQpO1xyXG5cclxuICAgIGxldCBlbWFpbElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgZW1haWxJbnB1dC5pZD1cInNpZ251cC1lbWFpbFwiO1xyXG4gICAgZW1haWxJbnB1dC50eXBlID0gXCJlbWFpbFwiO1xyXG4gICAgZGl2U2lnbnVwSW5wdXQuYXBwZW5kQ2hpbGQoZW1haWxJbnB1dCk7XHJcblxyXG4gICAgbGV0IHBhc3N3b3JkSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBwYXNzd29yZElucHV0LmlkPVwic2lnbnVwLXBhc3N3b3JkXCI7XHJcbiAgICBwYXNzd29yZElucHV0LnR5cGUgPSBcInBhc3N3b3JkXCI7XHJcbiAgICBkaXZTaWdudXBJbnB1dC5hcHBlbmRDaGlsZChwYXNzd29yZElucHV0KTtcclxuXHJcbiAgICBsZXQgZGVzY3JpcHRpb25JbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcclxuICAgIGRlc2NyaXB0aW9uSW5wdXQuaWQ9XCJzaWdudXAtZGVzY3JpcHRpb25cIjtcclxuICAgIGRlc2NyaXB0aW9uSW5wdXQucm93cz0xMjtcclxuICAgIGRlc2NyaXB0aW9uSW5wdXQuY29scz0zNjtcclxuICAgIGRpdlNpZ251cElucHV0LmFwcGVuZENoaWxkKGRlc2NyaXB0aW9uSW5wdXQpO1xyXG5cclxuICAgIHBhcmVudF9ub2RlLmFwcGVuZENoaWxkKGRpdlNpZ251cElucHV0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdMb2dpbihwYXJlbnRfbm9kZTpIVE1MRWxlbWVudCl7XHJcblxyXG4gICAgbGV0IGRpdkxvZ2luID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdkxvZ2luLmNsYXNzTGlzdC5hZGQoXCJkaXZMb2dpblwiKTtcclxuICAgIFxyXG4gICAgLy9sb2dpbiBsYWJlbHNcclxuICAgIGxldCBkaXZMb2dpbkxhYmVscyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZMb2dpbkxhYmVscy5jbGFzc0xpc3QuYWRkKFwiZGl2TG9naW5MYWJlbHNcIik7XHJcblxyXG4gICAgbGV0IGVtYWlsTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBlbWFpbExhYmVsLmlubmVySFRNTD1cIkUtbWFpbDpcIjtcclxuICAgIGRpdkxvZ2luTGFiZWxzLmFwcGVuZENoaWxkKGVtYWlsTGFiZWwpO1xyXG5cclxuICAgIGxldCBwYXNzd29yZExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgcGFzc3dvcmRMYWJlbC5pbm5lckhUTUw9XCJQYXNzd29yZDpcIjtcclxuICAgIGRpdkxvZ2luTGFiZWxzLmFwcGVuZENoaWxkKHBhc3N3b3JkTGFiZWwpO1xyXG5cclxuICAgIGRpdkxvZ2luLmFwcGVuZENoaWxkKGRpdkxvZ2luTGFiZWxzKTtcclxuXHJcbiAgICAvL2xvZ2luIGlucHV0c1xyXG5cclxuICAgIGxldCBkaXZMb2dpbklucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdkxvZ2luSW5wdXQuY2xhc3NMaXN0LmFkZChcImRpdkxvZ2luSW5wdXRcIik7XHJcblxyXG4gICAgbGV0IGVtYWlsSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBlbWFpbElucHV0LmlkPVwidXNlckVtYWlsXCI7XHJcbiAgICBlbWFpbElucHV0LnR5cGUgPSBcImVtYWlsXCI7XHJcbiAgICBkaXZMb2dpbklucHV0LmFwcGVuZENoaWxkKGVtYWlsSW5wdXQpO1xyXG5cclxuICAgIGxldCBwYXNzd29yZElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgcGFzc3dvcmRJbnB1dC5pZD1cInVzZXJQYXNzXCI7XHJcbiAgICBwYXNzd29yZElucHV0LnR5cGUgPSBcInBhc3N3b3JkXCI7XHJcbiAgICBkaXZMb2dpbklucHV0LmFwcGVuZENoaWxkKHBhc3N3b3JkSW5wdXQpO1xyXG5cclxuICAgIGRpdkxvZ2luLmFwcGVuZENoaWxkKGRpdkxvZ2luSW5wdXQpO1xyXG5cclxuICAgIHBhcmVudF9ub2RlLmFwcGVuZENoaWxkKGRpdkxvZ2luKTtcclxuXHJcbiAgICBsZXQgZGl2TG9naW5CdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2TG9naW5CdXR0b24uY2xhc3NMaXN0LmFkZChcImRpdkxvZ2luQnV0dG9uXCIpO1xyXG5cclxuICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgYnV0dG9uLmlkPVwiYnRuTG9naW5cIjtcclxuICAgIGJ1dHRvbi5pbm5lckhUTUw9XCJVbG9ndWogc2VcIjtcclxuICAgIGRpdkxvZ2luQnV0dG9uLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcblxyXG4gICAgcGFyZW50X25vZGUuYXBwZW5kQ2hpbGQoZGl2TG9naW5CdXR0b24pO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdVc2VyUHJvZmlsZSh1c2VyOmFueSkgOiB2b2lke1xyXG4gICAgbGV0IHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWlkZGxlXCIpO1xyXG4gICAgbGV0IGRpdlVzZXJQcm9maWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlVzZXJQcm9maWxlLmNsYXNzTGlzdC5hZGQoXCJkaXZVc2VyUHJvZmlsZVwiKTtcclxuXHJcbiAgICBsZXQgdXNlckluZm9OYXNsb3YgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIik7XHJcbiAgICB1c2VySW5mb05hc2xvdi5jbGFzc0xpc3QuYWRkKFwidXNlckluZm9OYXNsb3ZcIik7XHJcbiAgICBpZihKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJjdXJyZW50LXVzZXJcIikpLmVtYWlsPT09dXNlci5lbWFpbCl7XHJcbiAgICAgICAgdXNlckluZm9OYXNsb3YuaW5uZXJIVE1MPVwiVmFzIHByb2ZpbFwiO1xyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgICAgICB1c2VySW5mb05hc2xvdi5pbm5lckhUTUw9XCJLb3Jpc25pa1wiO1xyXG4gICAgfVxyXG4gICAgZGl2VXNlclByb2ZpbGUuYXBwZW5kQ2hpbGQodXNlckluZm9OYXNsb3YpO1xyXG5cclxuICAgIGxldCBkaXZVc2VyUHJvZmlsZUluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2VXNlclByb2ZpbGVJbmZvLmNsYXNzTGlzdC5hZGQoXCJkaXZVc2VyUHJvZmlsZUluZm9cIik7XHJcblxyXG4gICAgaWYoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImN1cnJlbnQtdXNlci1sYWJlbFwiKT09PVwiS09SSVNOSUtcIil7XHJcbiAgICAgICAgZHJhd0tvcmlzbmlrUHJvZmlsZShkaXZVc2VyUHJvZmlsZUluZm8sdXNlcik7XHJcbiAgICB9XHJcbiAgICBlbHNle1xyXG4gICAgICAgIGRyYXdLb21wYW5pamFQcm9maWxlKGRpdlVzZXJQcm9maWxlSW5mbyx1c2VyKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZGl2VXNlclByb2ZpbGUuYXBwZW5kQ2hpbGQoZGl2VXNlclByb2ZpbGVJbmZvKTtcclxuXHJcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZGl2VXNlclByb2ZpbGUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3S29yaXNuaWtQcm9maWxlKHBhcmVudDpIVE1MRWxlbWVudCx1c2VyOlVzZXIpe1xyXG5cclxuICAgIGxldCBkaXZVc2VyUHJvZmlsZUluZm9EYXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlVzZXJQcm9maWxlSW5mb0RhdGEuY2xhc3NMaXN0LmFkZChcImRpdlVzZXJQcm9maWxlSW5mb0RhdGFcIik7XHJcbiAgICAvL3BvZGFjaVxyXG4gICAgbGV0IGRpdlVzZXJOYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGxldCBsYWJlbE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsYWJlbE5hbWUuY2xhc3NMaXN0LmFkZChcIm1haW4tbGFiZWxcIik7XHJcbiAgICBsYWJlbE5hbWUuaW5uZXJIVE1MPVwiSW1lOiBcIjtcclxuICAgIGRpdlVzZXJOYW1lLmFwcGVuZENoaWxkKGxhYmVsTmFtZSk7XHJcbiAgICBsZXQgbGFiZWxOYW1lVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGFiZWxOYW1lVmFsdWUuaW5uZXJIVE1MPXVzZXIubmFtZSArIFwiIFwiK3VzZXIubGFzdG5hbWU7XHJcbiAgICBkaXZVc2VyTmFtZS5hcHBlbmRDaGlsZChsYWJlbE5hbWVWYWx1ZSk7IFxyXG4gICAgZGl2VXNlclByb2ZpbGVJbmZvRGF0YS5hcHBlbmRDaGlsZChkaXZVc2VyTmFtZSk7XHJcblxyXG4gICAgbGV0IGRpdlVzZXJFbWFpbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBsZXQgbGFiZWxFbWFpbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsRW1haWwuY2xhc3NMaXN0LmFkZChcIm1haW4tbGFiZWxcIik7XHJcbiAgICBsYWJlbEVtYWlsLmlubmVySFRNTD1cIkVtYWlsOiBcIjtcclxuICAgIGRpdlVzZXJFbWFpbC5hcHBlbmRDaGlsZChsYWJlbEVtYWlsKTtcclxuICAgIGxldCBsYWJlbEVtYWlsVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGFiZWxFbWFpbFZhbHVlLmlubmVySFRNTD11c2VyLmVtYWlsO1xyXG4gICAgZGl2VXNlckVtYWlsLmFwcGVuZENoaWxkKGxhYmVsRW1haWxWYWx1ZSk7IFxyXG4gICAgZGl2VXNlclByb2ZpbGVJbmZvRGF0YS5hcHBlbmRDaGlsZChkaXZVc2VyRW1haWwpO1xyXG5cclxuICAgIGxldCBkaXZVc2VyU2tpbGxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGxldCBsYWJlbFNraWxscyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsU2tpbGxzLmNsYXNzTGlzdC5hZGQoXCJtYWluLWxhYmVsXCIpO1xyXG4gICAgbGFiZWxTa2lsbHMuaW5uZXJIVE1MPVwiU2tpbGxzOiBcIjtcclxuICAgIGRpdlVzZXJTa2lsbHMuYXBwZW5kQ2hpbGQobGFiZWxTa2lsbHMpO1xyXG4gICAgbGV0IGxhYmVsU2tpbGxzVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGFiZWxTa2lsbHNWYWx1ZS5pbm5lckhUTUw9dXNlci5za2lsbHM7XHJcbiAgICBkaXZVc2VyU2tpbGxzLmFwcGVuZENoaWxkKGxhYmVsU2tpbGxzVmFsdWUpOyBcclxuICAgIGRpdlVzZXJQcm9maWxlSW5mb0RhdGEuYXBwZW5kQ2hpbGQoZGl2VXNlclNraWxscyk7XHJcblxyXG4gICAgbGV0IGRpdlVzZXJDViA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBsZXQgbGFiZWxDViA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsQ1YuY2xhc3NMaXN0LmFkZChcIm1haW4tbGFiZWxcIik7XHJcbiAgICBsYWJlbENWLmlubmVySFRNTD1cIkNWIGtvcmlzbmlrYTogXCI7XHJcbiAgICBkaXZVc2VyQ1YuYXBwZW5kQ2hpbGQobGFiZWxDVik7XHJcbiAgICBsZXQgbGFiZWxDVlZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGxhYmVsQ1ZWYWx1ZS5pbm5lckhUTUw9dXNlci51c2VyQ1Y7XHJcbiAgICBkaXZVc2VyQ1YuYXBwZW5kQ2hpbGQobGFiZWxDVlZhbHVlKTsgXHJcbiAgICBkaXZVc2VyUHJvZmlsZUluZm9EYXRhLmFwcGVuZENoaWxkKGRpdlVzZXJDVik7XHJcblxyXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGRpdlVzZXJQcm9maWxlSW5mb0RhdGEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3S29tcGFuaWphUHJvZmlsZShwYXJlbnQ6SFRNTEVsZW1lbnQsdXNlcjpLb21wYW5pamEpe1xyXG4gICAgbGV0IGRpdlVzZXJQcm9maWxlSW5mb0RhdGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2VXNlclByb2ZpbGVJbmZvRGF0YS5jbGFzc0xpc3QuYWRkKFwiZGl2VXNlclByb2ZpbGVJbmZvRGF0YVwiKTtcclxuICAgIC8vcG9kYWNpXHJcbiAgICBsZXQgZGl2VXNlck5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGV0IGxhYmVsTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsTmFtZS5jbGFzc0xpc3QuYWRkKFwibWFpbi1sYWJlbFwiKTtcclxuICAgIGxhYmVsTmFtZS5pbm5lckhUTUw9XCJOYXppdjogXCI7XHJcbiAgICBkaXZVc2VyTmFtZS5hcHBlbmRDaGlsZChsYWJlbE5hbWUpO1xyXG4gICAgbGV0IGxhYmVsTmFtZVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGxhYmVsTmFtZVZhbHVlLmlubmVySFRNTD11c2VyLm5hbWU7XHJcbiAgICBkaXZVc2VyTmFtZS5hcHBlbmRDaGlsZChsYWJlbE5hbWVWYWx1ZSk7IFxyXG4gICAgZGl2VXNlclByb2ZpbGVJbmZvRGF0YS5hcHBlbmRDaGlsZChkaXZVc2VyTmFtZSk7XHJcblxyXG4gICAgbGV0IGRpdlVzZXJFbWFpbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBsZXQgbGFiZWxFbWFpbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsRW1haWwuY2xhc3NMaXN0LmFkZChcIm1haW4tbGFiZWxcIik7XHJcbiAgICBsYWJlbEVtYWlsLmlubmVySFRNTD1cIkVtYWlsOiBcIjtcclxuICAgIGRpdlVzZXJFbWFpbC5hcHBlbmRDaGlsZChsYWJlbEVtYWlsKTtcclxuICAgIGxldCBsYWJlbEVtYWlsVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGFiZWxFbWFpbFZhbHVlLmlubmVySFRNTD11c2VyLmVtYWlsO1xyXG4gICAgZGl2VXNlckVtYWlsLmFwcGVuZENoaWxkKGxhYmVsRW1haWxWYWx1ZSk7IFxyXG4gICAgZGl2VXNlclByb2ZpbGVJbmZvRGF0YS5hcHBlbmRDaGlsZChkaXZVc2VyRW1haWwpO1xyXG5cclxuICAgIGxldCBkaXZVc2VyQ2l0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBsZXQgbGFiZWxDaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgbGFiZWxDaXR5LmNsYXNzTGlzdC5hZGQoXCJtYWluLWxhYmVsXCIpO1xyXG4gICAgbGFiZWxDaXR5LmlubmVySFRNTD1cIkdyYWQ6IFwiO1xyXG4gICAgZGl2VXNlckNpdHkuYXBwZW5kQ2hpbGQobGFiZWxDaXR5KTtcclxuICAgIGxldCBsYWJlbENpdHlWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBsYWJlbENpdHlWYWx1ZS5pbm5lckhUTUw9dXNlci5jaXR5O1xyXG4gICAgZGl2VXNlckNpdHkuYXBwZW5kQ2hpbGQobGFiZWxDaXR5VmFsdWUpOyBcclxuICAgIGRpdlVzZXJQcm9maWxlSW5mb0RhdGEuYXBwZW5kQ2hpbGQoZGl2VXNlckNpdHkpO1xyXG5cclxuICAgIGxldCBkaXZVc2VyRGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGV0IGxhYmVsRGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsYWJlbERlc2NyaXB0aW9uLmNsYXNzTGlzdC5hZGQoXCJtYWluLWxhYmVsXCIpO1xyXG4gICAgbGFiZWxEZXNjcmlwdGlvbi5pbm5lckhUTUw9XCJPcGlzIGtvbXBhbmlqZTogXCI7XHJcbiAgICBkaXZVc2VyRGVzY3JpcHRpb24uYXBwZW5kQ2hpbGQobGFiZWxEZXNjcmlwdGlvbik7XHJcbiAgICBsZXQgbGFiZWxEZXNjcmlwdGlvblZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGxhYmVsRGVzY3JpcHRpb25WYWx1ZS5pbm5lckhUTUw9dXNlci5kZXNjcmlwdGlvbjtcclxuICAgIGRpdlVzZXJEZXNjcmlwdGlvbi5hcHBlbmRDaGlsZChsYWJlbERlc2NyaXB0aW9uVmFsdWUpOyBcclxuICAgIGRpdlVzZXJQcm9maWxlSW5mb0RhdGEuYXBwZW5kQ2hpbGQoZGl2VXNlckRlc2NyaXB0aW9uKTtcclxuXHJcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZGl2VXNlclByb2ZpbGVJbmZvRGF0YSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3TmV3S29ua3VycyhwYXJlbnQ6SFRNTEVsZW1lbnQpIDogdm9pZHtcclxuICAgIGxldCBkaXZOZXdLb25rdXJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdk5ld0tvbmt1cnMuY2xhc3NMaXN0LmFkZChcImRpdk5ld0tvbmt1cnNcIik7XHJcblxyXG4gICAgbGV0IGRpdkpvYklucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdkpvYklucHV0LmNsYXNzTGlzdC5hZGQoXCJkaXZKb2JJbnB1dFwiKTtcclxuXHJcbiAgICBsZXQgam9iTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBqb2JMYWJlbC5pbm5lckhUTUwgPSBcIlBvc2FvOiBcIjtcclxuICAgIGRpdkpvYklucHV0LmFwcGVuZENoaWxkKGpvYkxhYmVsKTtcclxuXHJcbiAgICBsZXQgam9iSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBqb2JJbnB1dC50eXBlPVwibmFtZVwiO1xyXG4gICAgam9iSW5wdXQuaWQ9XCJqb2JJbnB1dFwiO1xyXG4gICAgZGl2Sm9iSW5wdXQuYXBwZW5kQ2hpbGQoam9iSW5wdXQpO1xyXG4gICAgZGl2TmV3S29ua3Vycy5hcHBlbmRDaGlsZChkaXZKb2JJbnB1dCk7XHJcblxyXG4gICAgbGV0IGRpdk1vbmV5SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2TW9uZXlJbnB1dC5jbGFzc0xpc3QuYWRkKFwiZGl2TW9uZXlJbnB1dFwiKTtcclxuXHJcbiAgICBsZXQgbW9uZXlMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIG1vbmV5TGFiZWwuaW5uZXJIVE1MID0gXCJQbGF0YTogXCI7XHJcbiAgICBkaXZNb25leUlucHV0LmFwcGVuZENoaWxkKG1vbmV5TGFiZWwpO1xyXG5cclxuICAgIGxldCBtb25leUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgbW9uZXlJbnB1dC50eXBlPVwibmFtZVwiO1xyXG4gICAgbW9uZXlJbnB1dC5pZD1cIm1vbmV5SW5wdXRcIjtcclxuICAgIGRpdk1vbmV5SW5wdXQuYXBwZW5kQ2hpbGQobW9uZXlJbnB1dCk7XHJcbiAgICBkaXZOZXdLb25rdXJzLmFwcGVuZENoaWxkKGRpdk1vbmV5SW5wdXQpO1xyXG5cclxuICAgIGxldCBkaXZLb25rdXJzQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdktvbmt1cnNCdXR0b24uY2xhc3NMaXN0LmFkZChcImRpdktvbmt1cnNCdXR0b25cIik7XHJcblxyXG4gICAgbGV0IGtvbmt1cnNCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAga29ua3Vyc0J1dHRvbi5pbm5lckhUTUwgPSBcIkRvZGFqIGtvbmt1cnNcIjtcclxuICAgIGtvbmt1cnNCdXR0b24uaWQgPSBcIm5ld0tvbmt1cnNCdXR0b25cIjtcclxuICAgIGRpdktvbmt1cnNCdXR0b24uYXBwZW5kQ2hpbGQoa29ua3Vyc0J1dHRvbik7XHJcbiAgICBkaXZOZXdLb25rdXJzLmFwcGVuZENoaWxkKGRpdktvbmt1cnNCdXR0b24pO1xyXG5cclxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChkaXZOZXdLb25rdXJzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdWaWV3S29ua3Vyc2UocGFyZW50OkhUTUxFbGVtZW50LGFycmF5Oktvbmt1cnNbXSl7XHJcbiAgICBsZXQgZGl2VXNlclZpZXdLb25rdXJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlVzZXJWaWV3S29ua3Vycy5jbGFzc0xpc3QuYWRkKFwiZGl2VXNlclZpZXdLb25rdXJzXCIpO1xyXG5cclxuICAgIGFycmF5LmZvckVhY2goa29uPT57XHJcbiAgICAgICAgbGV0IGRpdktvbmt1cnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGRpdktvbmt1cnMuY2xhc3NMaXN0LmFkZChcImRpdktvbmt1cnNcIik7XHJcblxyXG4gICAgICAgIGxldCBqb2JMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgICAgICBqb2JMYWJlbC5pbm5lckhUTUw9XCJQb3NhbzogXCIra29uLmpvYjtcclxuICAgICAgICBkaXZLb25rdXJzLmFwcGVuZENoaWxkKGpvYkxhYmVsKTtcclxuXHJcbiAgICAgICAgbGV0IGNvbXBhbnlMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgICAgICBjb21wYW55TGFiZWwuaW5uZXJIVE1MID0gXCJLb21wYW5pamE6IFwiK2tvbi5jb21wYW55O1xyXG4gICAgICAgIGRpdktvbmt1cnMuYXBwZW5kQ2hpbGQoY29tcGFueUxhYmVsKTtcclxuXHJcbiAgICAgICAgbGV0IG1vbmV5TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICAgICAgbW9uZXlMYWJlbC5pbm5lckhUTUw9XCJQbGF0YTogXCIra29uLm1vbmV5O1xyXG4gICAgICAgIGRpdktvbmt1cnMuYXBwZW5kQ2hpbGQobW9uZXlMYWJlbCk7XHJcblxyXG4gICAgICAgIGxldCBidXR0b25Lb25rdXJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgICAgICBhZGRVc2VyS29ua3Vyc0V2ZW50KGJ1dHRvbktvbmt1cnMsPFVzZXI+SlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiY3VycmVudC11c2VyXCIpKSxrb24pO1xyXG4gICAgICAgIGJ1dHRvbktvbmt1cnMuaW5uZXJIVE1MPVwiUHJpamF2aSBzZVwiO1xyXG4gICAgICAgIGRpdktvbmt1cnMuYXBwZW5kQ2hpbGQoYnV0dG9uS29ua3Vycyk7XHJcbiAgICAgICAgZGl2VXNlclZpZXdLb25rdXJzLmFwcGVuZENoaWxkKGRpdktvbmt1cnMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGRpdlVzZXJWaWV3S29ua3Vycyk7XHJcbn0iLCJleHBvcnQgY29uc3QgdXNlclVSTCA9IFwiaHR0cDovLzEyNy4wLjAuMTo2NTAwL3VzZXJcIjtcclxuZXhwb3J0IGNvbnN0IGtvbmt1cnNVUkwgPSBcImh0dHA6Ly8xMjcuMC4wLjE6NjUwMC9rb25rdXJzXCI7XHJcbmV4cG9ydCBjb25zdCB1c2VyS29ua3Vyc1VSTD1cImh0dHA6Ly8xMjcuMC4wLjE6NjUwMC91c2VyLWtvbmt1cnNcIjtcclxuZXhwb3J0IGNvbnN0IHByaWphdmlOYUtvbmt1cnNVUkw9XCJodHRwOi8vMTI3LjAuMC4xOjY1MDAvcHJpamF2aS1uYS1rb25rdXJzXCI7XHJcbmV4cG9ydCBjb25zdCBudW1iZXJPZlRha2VzID0gODsiLCJleHBvcnQgY2xhc3MgRW50aXR5e1xyXG4gICAgbGFiZWw6c3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IobGFiZWw6c3RyaW5nKXtcclxuICAgICAgICB0aGlzLmxhYmVsPWxhYmVsO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRW50aXR5IH0gZnJvbSBcIi4vZW50aXR5XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlciBleHRlbmRzIEVudGl0eXtcclxuICAgIG5hbWU6c3RyaW5nO1xyXG4gICAgbGFzdG5hbWU6c3RyaW5nO1xyXG4gICAgZW1haWw6c3RyaW5nO1xyXG4gICAgcGFzc3dvcmQ6c3RyaW5nO1xyXG4gICAgc2tpbGxzOnN0cmluZztcclxuICAgIHVzZXJDVjpzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBzdXBlcihcIktPUklTTklLXCIpO1xyXG4gICAgICAgIHRoaXMubmFtZT1udWxsO1xyXG4gICAgICAgIHRoaXMubGFzdG5hbWU9bnVsbDtcclxuICAgICAgICB0aGlzLmVtYWlsPW51bGw7XHJcbiAgICAgICAgdGhpcy5wYXNzd29yZD1udWxsO1xyXG4gICAgICAgIHRoaXMuc2tpbGxzPW51bGw7XHJcbiAgICAgICAgdGhpcy51c2VyQ1Y9bnVsbDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFN1YmplY3QsIGF1ZGl0VGltZSwgY29tYmluZUxhdGVzdCwgZGVib3VuY2VUaW1lLCBkZWxheSwgZnJvbUV2ZW50LCBpbnRlcnZhbCwgbWFwLCBzYW1wbGVUaW1lLCBzd2l0Y2hNYXAsIHRha2UsIHRha2VMYXN0LCB0YWtlVW50aWwgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBnZXRVc2VyLCBnZXRVc2VyV2l0aEVtYWlsLCBnZXRVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQgfSBmcm9tIFwiLi9kYlNlcnZpY2VzXCI7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vY2xhc3Nlcy91c2VyXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0VXBMb2dpbigpe1xyXG4gICAgLy9tdXN0IGJlIHNldCB1cCB3aGVuICNwcmlqYXZpLXNlIGlzIGNsaWNrZWRcclxuICAgIC8vc2VwYXJhdGUgaW4gYW5vdGhlciBmaWxlXHJcbiAgICBjb25zdCB1c2VyOlVzZXI9bmV3IFVzZXIoKTtcclxuXHJcbiAgICBjb25zdCBwYXNzd29yZCQgPSBmcm9tRXZlbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN1c2VyUGFzc1wiKSxcImlucHV0XCIpLnBpcGUoXHJcbiAgICAgICAgZGVib3VuY2VUaW1lKDIwMCksXHJcbiAgICAgICAgbWFwKChldmVudDogSW5wdXRFdmVudCkgPT4gKDxIVE1MSW5wdXRFbGVtZW50PmV2ZW50LnRhcmdldCkudmFsdWUpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGVtYWlsJCA9IGZyb21FdmVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3VzZXJFbWFpbFwiKSxcImlucHV0XCIpLnBpcGUoXHJcbiAgICAgICAgZGVib3VuY2VUaW1lKDIwMCksXHJcbiAgICAgICAgbWFwKChldmVudDogSW5wdXRFdmVudCkgPT4gKDxIVE1MSW5wdXRFbGVtZW50PmV2ZW50LnRhcmdldCkudmFsdWUpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGxvZ2luJD1jb21iaW5lTGF0ZXN0KFtlbWFpbCQscGFzc3dvcmQkXSlcclxuICAgICAgICAuc3Vic2NyaWJlKG5leHQ9PntcclxuICAgICAgICAgICAgdXNlci5lbWFpbD1uZXh0WzBdO1xyXG4gICAgICAgICAgICB1c2VyLnBhc3N3b3JkPW5leHRbMV07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgZnJvbUV2ZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYnRuTG9naW5cIiksXCJjbGlja1wiKVxyXG4gICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKCk9PmdldFVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCh1c2VyLmVtYWlsLHVzZXIucGFzc3dvcmQpKSxcclxuICAgICAgICAgICAgZGVsYXkoNTAwKVxyXG4gICAgICAgIClcclxuICAgICAgICAuc3Vic2NyaWJlKG5leHQ9PntcclxuICAgICAgICAgICAgaWYobmV4dD09PW51bGwpe1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJOaXN0ZSB1bmVsaSBpc3ByYXZuZSBwb2RhdGtlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiY3VycmVudC11c2VyXCIsSlNPTi5zdHJpbmdpZnkobmV4dCkpO1xyXG4gICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImN1cnJlbnQtdXNlci1sYWJlbFwiLG5leHQuc2tpbGxzPT09dW5kZWZpbmVkP1wiS09NUEFOSUpBXCI6XCJLT1JJU05JS1wiKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbn0iLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBzd2l0Y2hNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzQ29tcGxldGUgJiYgIWlubmVyU3Vic2NyaWJlciAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH07XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID09PSBudWxsIHx8IGlubmVyU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5uZXJTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB2YXIgaW5uZXJJbmRleCA9IDA7XG4gICAgICAgICAgICB2YXIgb3V0ZXJJbmRleCA9IGluZGV4Kys7XG4gICAgICAgICAgICBpbm5lckZyb20ocHJvamVjdCh2YWx1ZSwgb3V0ZXJJbmRleCkpLnN1YnNjcmliZSgoaW5uZXJTdWJzY3JpYmVyID0gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQocmVzdWx0U2VsZWN0b3IgPyByZXN1bHRTZWxlY3Rvcih2YWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCsrKSA6IGlubmVyVmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwLmpzLm1hcCIsImltcG9ydCB7IGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGRlbGF5V2hlbiB9IGZyb20gJy4vZGVsYXlXaGVuJztcbmltcG9ydCB7IHRpbWVyIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS90aW1lcic7XG5leHBvcnQgZnVuY3Rpb24gZGVsYXkoZHVlLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNTY2hlZHVsZXI7IH1cbiAgICB2YXIgZHVyYXRpb24gPSB0aW1lcihkdWUsIHNjaGVkdWxlcik7XG4gICAgcmV0dXJuIGRlbGF5V2hlbihmdW5jdGlvbiAoKSB7IHJldHVybiBkdXJhdGlvbjsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBhc3luYyBhcyBhc3luY1NjaGVkdWxlciB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuaW1wb3J0IHsgaXNWYWxpZERhdGUgfSBmcm9tICcuLi91dGlsL2lzRGF0ZSc7XG5leHBvcnQgZnVuY3Rpb24gdGltZXIoZHVlVGltZSwgaW50ZXJ2YWxPclNjaGVkdWxlciwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGR1ZVRpbWUgPT09IHZvaWQgMCkgeyBkdWVUaW1lID0gMDsgfVxuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY1NjaGVkdWxlcjsgfVxuICAgIHZhciBpbnRlcnZhbER1cmF0aW9uID0gLTE7XG4gICAgaWYgKGludGVydmFsT3JTY2hlZHVsZXIgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNTY2hlZHVsZXIoaW50ZXJ2YWxPclNjaGVkdWxlcikpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IGludGVydmFsT3JTY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbnRlcnZhbER1cmF0aW9uID0gaW50ZXJ2YWxPclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGR1ZSA9IGlzVmFsaWREYXRlKGR1ZVRpbWUpID8gK2R1ZVRpbWUgLSBzY2hlZHVsZXIubm93KCkgOiBkdWVUaW1lO1xuICAgICAgICBpZiAoZHVlIDwgMCkge1xuICAgICAgICAgICAgZHVlID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbiA9IDA7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChuKyspO1xuICAgICAgICAgICAgICAgIGlmICgwIDw9IGludGVydmFsRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSh1bmRlZmluZWQsIGludGVydmFsRHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZHVlKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVyLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHZhbHVlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRGF0ZS5qcy5tYXAiLCJpbXBvcnQgeyBFbnRpdHkgfSBmcm9tIFwiLi9lbnRpdHlcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBLb21wYW5pamEgZXh0ZW5kcyBFbnRpdHl7XHJcbiAgICBuYW1lOnN0cmluZztcclxuICAgIGRlc2NyaXB0aW9uOnN0cmluZztcclxuICAgIGNpdHk6c3RyaW5nO1xyXG4gICAgZW1haWw6c3RyaW5nO1xyXG4gICAgcGFzc3dvcmQ6c3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgc3VwZXIoXCJLT01QQU5JSkFcIik7XHJcbiAgICAgICAgdGhpcy5uYW1lPW51bGw7XHJcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbj1udWxsO1xyXG4gICAgICAgIHRoaXMuY2l0eT1udWxsO1xyXG4gICAgICAgIHRoaXMuZW1haWw9bnVsbDtcclxuICAgICAgICB0aGlzLnBhc3N3b3JkPW51bGw7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTdWJqZWN0LCBmcm9tRXZlbnQsIGRlYm91bmNlVGltZSwgbWFwLCB0YWtlVW50aWwsIGNvbWJpbmVMYXRlc3QsIGZyb20sIHN3aXRjaE1hcCwgZGVsYXksIE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uL2NsYXNzZXMvdXNlclwiO1xyXG5pbXBvcnQgeyBnZXRVc2VyV2l0aEVtYWlsLCBnZXRVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQsIHBvc3RVc2VyIH0gZnJvbSBcIi4vZGJTZXJ2aWNlc1wiO1xyXG5pbXBvcnQgeyBLb21wYW5pamEgfSBmcm9tIFwiLi4vY2xhc3Nlcy9rb21wYW5pamFcIjtcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0VXBTaWduaW4oKXtcclxuXHJcbiAgICBjb25zdCB1c2VyID0gbmV3IFVzZXIoKTtcclxuICAgIGNvbnN0IGtvbXBhbmlqYSA9IG5ldyBLb21wYW5pamEoKTtcclxuXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpZ251cEJ1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKT0+e1xyXG4gICAgICAgIGxldCBzZWxlY3RlZExhYmVsID0gKDxIVE1MU2VsZWN0RWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Nob29zZVNlbGVjdFwiKSkudmFsdWU7XHJcbiAgICAgICAgaWYoc2VsZWN0ZWRMYWJlbD09PVwiS09SSVNOSUtcIil7XHJcbiAgICAgICAgICAgIHVzZXIubmFtZT0oPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzaWdudXAtbmFtZVwiKSkudmFsdWU7XHJcbiAgICAgICAgICAgIHVzZXIubGFzdG5hbWU9KDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2lnbnVwLWxhc3RuYW1lXCIpKS52YWx1ZTtcclxuICAgICAgICAgICAgdXNlci5lbWFpbD0oPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzaWdudXAtZW1haWxcIikpLnZhbHVlO1xyXG4gICAgICAgICAgICB1c2VyLnBhc3N3b3JkPSg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NpZ251cC1wYXNzd29yZFwiKSkudmFsdWU7XHJcbiAgICAgICAgICAgIHVzZXIuc2tpbGxzPSg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NpZ251cC1za2lsbHNcIikpLnZhbHVlO1xyXG4gICAgICAgICAgICB1c2VyLnVzZXJDVj0oPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzaWdudXAtdXNlcmN2XCIpKS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihzZWxlY3RlZExhYmVsPT09XCJLT01QQU5JSkFcIil7XHJcbiAgICAgICAgICAgIGtvbXBhbmlqYS5uYW1lPSg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NpZ251cC1uYW1lXCIpKS52YWx1ZTtcclxuICAgICAgICAgICAga29tcGFuaWphLmNpdHk9KDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2lnbnVwLWNpdHlcIikpLnZhbHVlO1xyXG4gICAgICAgICAgICBrb21wYW5pamEuZW1haWw9KDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2lnbnVwLWVtYWlsXCIpKS52YWx1ZTtcclxuICAgICAgICAgICAga29tcGFuaWphLnBhc3N3b3JkPSg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NpZ251cC1wYXNzd29yZFwiKSkudmFsdWU7XHJcbiAgICAgICAgICAgIGtvbXBhbmlqYS5kZXNjcmlwdGlvbj0oPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzaWdudXAtZGVzY3JpcHRpb25cIikpLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihzZWxlY3RlZExhYmVsPT09XCJLT1JJU05JS1wiICYmICh1c2VyLm5hbWU9PT1cIlwiIHx8IHVzZXIuZW1haWw9PT1cIlwiIHx8IHVzZXIucGFzc3dvcmQ9PT1cIlwiXHJcbiAgICAgICAgICAgIHx8IHVzZXIuc2tpbGxzPT09XCJcIiB8fCB1c2VyLnVzZXJDVj09PVwiXCIpKXtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KFwiTW9yYXRlIGRhIHVuZXNldGUgc3ZhIHBvbGphLi4uXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoc2VsZWN0ZWRMYWJlbD09PVwiS09NUEFOSUpBXCIgJiYgKGtvbXBhbmlqYS5uYW1lPT09XCJcIiB8fCBrb21wYW5pamEuY2l0eT09PVwiXCIgfHxcclxuICAgICAgICAgICAgICAgIGtvbXBhbmlqYS5kZXNjcmlwdGlvbj09PVwiXCIgfHwga29tcGFuaWphLmVtYWlsPT09XCJcIiB8fCBrb21wYW5pamEucGFzc3dvcmQ9PT1cIlwiKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJNb3JhdGUgZGEgdW5lc2V0ZSBzdmEgcG9samEuLi5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBnZXRVc2VyV2l0aEVtYWlsKHNlbGVjdGVkTGFiZWw9PT1cIktPUklTTklLXCIgPyB1c2VyLmVtYWlsIDoga29tcGFuaWphLmVtYWlsLHNlbGVjdGVkTGFiZWwpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZShuZXh0PT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5leHQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJLb3Jpc25payBzYSBvdm8gZW1haWwgYWRyZXNvbSB2ZWMgcG9zdG9qaS4uLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdFVzZXIoc2VsZWN0ZWRMYWJlbD09PVwiS09SSVNOSUtcIiA/IHVzZXIgOiBrb21wYW5pamEsc2VsZWN0ZWRMYWJlbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKHBvc3ROZXh0PT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBvc3ROZXh0PT09ZmFsc2Upe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ0Rvc2xvIGplIGRvIGdyZXNrZSBwb2t1c2FqdGUgcG9ub3ZvLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiY3VycmVudC11c2VyLWxhYmVsXCIsc2VsZWN0ZWRMYWJlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiY3VycmVudC11c2VyXCIsc2VsZWN0ZWRMYWJlbD09PVwiS09SSVNOSUtcIiA/IHVzZXIuZW1haWwgOiBrb21wYW5pamEuZW1haWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VzcGVzbm8gc3RlIHJlZ2lzdHJvdmFuaS4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTsgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRpc2FibGVTaWdudXAoKXtcclxuICAgIGxldCBidG4gPSA8SFRNTEJ1dHRvbkVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zaWdudXBCdXR0b25cIik7XHJcbiAgICBidG4uZGlzYWJsZWQ9dHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gZW5hYmxlU2lnbnVwKCl7XHJcbiAgICBsZXQgYnRuID0gPEhUTUxCdXR0b25FbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2lnbnVwQnV0dG9uXCIpO1xyXG4gICAgYnRuLmRpc2FibGVkPWZhbHNlO1xyXG59IiwiaW1wb3J0IHsgc2V0VXBMb2dpbiB9IGZyb20gXCIuL2xvZ2luRXZlbnRzXCI7XHJcbmltcG9ydCB7IGRyYXdMb2dpbiwgZHJhd1NpZ251cCwgdXNlckZpbHRlciB9IGZyb20gXCIuL2RyYXdGdW5jdGlvbnNcIjtcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi9jbGFzc2VzL3VzZXJcIjtcclxuaW1wb3J0IHsgU3ViamVjdCwgaW50ZXJ2YWwsIHN3aXRjaE1hcCwgdGFrZUxhc3QsIHRpbWVyIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgaGlkZVNlYXJjaEJhciwgdG9nZ2xlU2VhcmNoQmFyLCB2aWV3VXNlcktvbmt1cnMgfSBmcm9tIFwiLi9wb2NldG5hRXZlbnRzXCI7XHJcblxyXG5kb2N1bWVudC5ib2R5Lm9ubG9hZD0oKT0+e1xyXG4gICAgdXNlckZpbHRlcigpO1xyXG4gICAgaWYoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImN1cnJlbnQtdXNlci1sYWJlbFwiKT09PVwiS09SSVNOSUtcIil7XHJcbiAgICAgICAgdmlld1VzZXJLb25rdXJzKCk7XHJcbiAgICB9XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYVtocmVmPScjcG9jZXRuYSddXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCgpPT57XHJcbiAgICAgICAgZG9jdW1lbnQubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0b2dnbGVTZWFyY2hCYXIoKTtcclxufSJdLCJuYW1lcyI6WyJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fZXh0ZW5kcyIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiX19nZW5lcmF0b3IiLCJ0aGlzQXJnIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsIm5leHQiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuIiwidiIsIm9wIiwiZG9uZSIsInZhbHVlIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsImUiLCJzdGVwIiwiX192YWx1ZXMiLCJvIiwicyIsIm0iLCJpIiwiX19yZWFkIiwiciIsImFyIiwiZXJyb3IiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwicGFjayIsImFyZ3VtZW50cyIsImwiLCJzbGljZSIsImNvbmNhdCIsIl9fYXdhaXQiLCJpc0Z1bmN0aW9uIiwiY3JlYXRlRXJyb3JDbGFzcyIsImNyZWF0ZUltcGwiLCJjdG9yRnVuYyIsImluc3RhbmNlIiwiRXJyb3IiLCJzdGFjayIsIlN1cHByZXNzZWRFcnJvciIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJfc3VwZXIiLCJlcnJvcnMiLCJtZXNzYWdlIiwibWFwIiwiZXJyIiwidG9TdHJpbmciLCJqb2luIiwibmFtZSIsImFyclJlbW92ZSIsImFyciIsIml0ZW0iLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJTdWJzY3JpcHRpb24iLCJpbml0aWFsVGVhcmRvd24iLCJjbG9zZWQiLCJfcGFyZW50YWdlIiwiX2ZpbmFsaXplcnMiLCJ1bnN1YnNjcmliZSIsImVfMSIsIl9hIiwiZV8yIiwiX2IiLCJpc0FycmF5IiwiX3BhcmVudGFnZV8xIiwiX3BhcmVudGFnZV8xXzEiLCJyZW1vdmUiLCJlXzFfMSIsInJldHVybiIsImluaXRpYWxGaW5hbGl6ZXIiLCJfZmluYWxpemVyc18xIiwiX2ZpbmFsaXplcnNfMV8xIiwiZmluYWxpemVyIiwiZXhlY0ZpbmFsaXplciIsImVfMl8xIiwiYWRkIiwidGVhcmRvd24iLCJfaGFzUGFyZW50IiwiX2FkZFBhcmVudCIsInBhcmVudCIsImluY2x1ZGVzIiwiX3JlbW92ZVBhcmVudCIsIkVNUFRZIiwiZW1wdHkiLCJFTVBUWV9TVUJTQ1JJUFRJT04iLCJpc1N1YnNjcmlwdGlvbiIsImNvbmZpZyIsIm9uVW5oYW5kbGVkRXJyb3IiLCJvblN0b3BwZWROb3RpZmljYXRpb24iLCJQcm9taXNlIiwidW5kZWZpbmVkIiwidXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyIsInVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCIsInRpbWVvdXRQcm92aWRlciIsInNldFRpbWVvdXQiLCJoYW5kbGVyIiwidGltZW91dCIsImFyZ3MiLCJfaSIsImRlbGVnYXRlIiwiYXBwbHkiLCJjbGVhclRpbWVvdXQiLCJoYW5kbGUiLCJyZXBvcnRVbmhhbmRsZWRFcnJvciIsIm5vb3AiLCJDT01QTEVURV9OT1RJRklDQVRJT04iLCJjcmVhdGVOb3RpZmljYXRpb24iLCJraW5kIiwiY29udGV4dCIsImVycm9yQ29udGV4dCIsImNiIiwiaXNSb290IiwiZXJyb3JUaHJvd24iLCJTdWJzY3JpYmVyIiwiZGVzdGluYXRpb24iLCJfdGhpcyIsImlzU3RvcHBlZCIsIkVNUFRZX09CU0VSVkVSIiwiY29tcGxldGUiLCJTYWZlU3Vic2NyaWJlciIsImhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24iLCJuZXh0Tm90aWZpY2F0aW9uIiwiX25leHQiLCJfZXJyb3IiLCJfY29tcGxldGUiLCJfYmluZCIsIkZ1bmN0aW9uIiwiYmluZCIsImZuIiwiQ29uc3VtZXJPYnNlcnZlciIsInBhcnRpYWxPYnNlcnZlciIsImhhbmRsZVVuaGFuZGxlZEVycm9yIiwib2JzZXJ2ZXJPck5leHQiLCJjb250ZXh0XzEiLCJub3RpZmljYXRpb24iLCJzdWJzY3JpYmVyIiwib2JzZXJ2YWJsZSIsImlkZW50aXR5IiwieCIsIk9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwibGlmdCIsIm9wZXJhdG9yIiwic291cmNlIiwiaXNPYnNlcnZlciIsIl90cnlTdWJzY3JpYmUiLCJzaW5rIiwiZm9yRWFjaCIsInByb21pc2VDdG9yIiwiZ2V0UHJvbWlzZUN0b3IiLCJyZXNvbHZlIiwicmVqZWN0IiwicGlwZSIsIm9wZXJhdGlvbnMiLCJmbnMiLCJpbnB1dCIsInJlZHVjZSIsInByZXYiLCJ0b1Byb21pc2UiLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvciIsIlN1YmplY3QiLCJjdXJyZW50T2JzZXJ2ZXJzIiwib2JzZXJ2ZXJzIiwiaGFzRXJyb3IiLCJ0aHJvd25FcnJvciIsInN1YmplY3QiLCJBbm9ueW1vdXNTdWJqZWN0IiwiX3Rocm93SWZDbG9zZWQiLCJfYyIsInNoaWZ0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiX2NoZWNrRmluYWxpemVkU3RhdHVzZXMiLCJfaW5uZXJTdWJzY3JpYmUiLCJhc09ic2VydmFibGUiLCJpc0FycmF5TGlrZSIsImlzUHJvbWlzZSIsInRoZW4iLCJpc0ludGVyb3BPYnNlcnZhYmxlIiwiaXNBc3luY0l0ZXJhYmxlIiwib2JqIiwiYXN5bmNJdGVyYXRvciIsImNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIiwiaXNJdGVyYWJsZSIsInJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IiLCJyZWFkYWJsZVN0cmVhbSIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJxIiwiYSIsInJlc3VtZSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJfX2FzeW5jR2VuZXJhdG9yIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwicmVhZCIsInJlbGVhc2VMb2NrIiwiaXNSZWFkYWJsZVN0cmVhbUxpa2UiLCJpbm5lckZyb20iLCJvYnMiLCJhcnJheSIsInByb21pc2UiLCJmcm9tQXN5bmNJdGVyYWJsZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsIlAiLCJfX2FzeW5jVmFsdWVzIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJwcm9jZXNzIiwiY2F0Y2giLCJvcGVyYXRlIiwiaW5pdCIsImhhc0xpZnQiLCJsaWZ0ZWRTb3VyY2UiLCJjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIiLCJvbk5leHQiLCJvbkNvbXBsZXRlIiwib25FcnJvciIsIm9uRmluYWxpemUiLCJPcGVyYXRvclN1YnNjcmliZXIiLCJzaG91bGRVbnN1YnNjcmliZSIsImNsb3NlZF8xIiwicHJvamVjdCIsImV4ZWN1dGVTY2hlZHVsZSIsInBhcmVudFN1YnNjcmlwdGlvbiIsInNjaGVkdWxlciIsIndvcmsiLCJkZWxheSIsInJlcGVhdCIsInNjaGVkdWxlU3Vic2NyaXB0aW9uIiwic2NoZWR1bGUiLCJtZXJnZU1hcCIsInJlc3VsdFNlbGVjdG9yIiwiY29uY3VycmVudCIsIkluZmluaXR5IiwiaWkiLCJvbkJlZm9yZU5leHQiLCJleHBhbmQiLCJpbm5lclN1YlNjaGVkdWxlciIsImFkZGl0aW9uYWxGaW5hbGl6ZXIiLCJidWZmZXIiLCJhY3RpdmUiLCJpc0NvbXBsZXRlIiwiY2hlY2tDb21wbGV0ZSIsIm91dGVyTmV4dCIsImRvSW5uZXJTdWIiLCJpbm5lckNvbXBsZXRlIiwiaW5uZXJWYWx1ZSIsImJ1ZmZlcmVkVmFsdWUiLCJtZXJnZUludGVybmFscyIsIm1hcE9uZU9yTWFueUFyZ3MiLCJjYWxsT3JBcHBseSIsIm5vZGVFdmVudEVtaXR0ZXJNZXRob2RzIiwiZXZlbnRUYXJnZXRNZXRob2RzIiwianF1ZXJ5TWV0aG9kcyIsImZyb21FdmVudCIsInRhcmdldCIsImV2ZW50TmFtZSIsIm9wdGlvbnMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzRXZlbnRUYXJnZXQiLCJtZXRob2ROYW1lIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyIiwidG9Db21tb25IYW5kbGVyUmVnaXN0cnkiLCJvbiIsIm9mZiIsImlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIiLCJzdWJUYXJnZXQiLCJBY3Rpb24iLCJzdGF0ZSIsImludGVydmFsUHJvdmlkZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJBc3luY0FjdGlvbiIsInBlbmRpbmciLCJpZCIsInJlY3ljbGVBc3luY0lkIiwicmVxdWVzdEFzeW5jSWQiLCJfaWQiLCJmbHVzaCIsIl9zY2hlZHVsZXIiLCJleGVjdXRlIiwiX2V4ZWN1dGUiLCJfZGVsYXkiLCJlcnJvclZhbHVlIiwiZXJyb3JlZCIsImFjdGlvbnMiLCJkYXRlVGltZXN0YW1wUHJvdmlkZXIiLCJub3ciLCJEYXRlIiwiU2NoZWR1bGVyIiwic2NoZWR1bGVyQWN0aW9uQ3RvciIsImFzeW5jU2NoZWR1bGVyIiwiQXN5bmNTY2hlZHVsZXIiLCJTY2hlZHVsZXJBY3Rpb24iLCJfYWN0aXZlIiwiYWN0aW9uIiwiZGVib3VuY2VUaW1lIiwiZHVlVGltZSIsImFjdGl2ZVRhc2siLCJsYXN0VmFsdWUiLCJsYXN0VGltZSIsImVtaXQiLCJlbWl0V2hlbklkbGUiLCJ0YXJnZXRUaW1lIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90byIsImdldEtleXMiLCJrZXlzIiwib2JzZXJ2ZU9uIiwic3Vic2NyaWJlT24iLCJzY2hlZHVsZUFzeW5jSXRlcmFibGUiLCJzY2hlZHVsZU9ic2VydmFibGUiLCJzY2hlZHVsZUFycmF5Iiwic2NoZWR1bGVQcm9taXNlIiwic2NoZWR1bGVJdGVyYWJsZSIsInNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIiwic2NoZWR1bGVkIiwiaXNTY2hlZHVsZXIiLCJsYXN0IiwicG9wU2NoZWR1bGVyIiwiY29tYmluZUxhdGVzdCIsInBvcFJlc3VsdFNlbGVjdG9yIiwiZmlyc3RfMSIsImtleSIsImFyZ3NBcmdBcnJheU9yT2JqZWN0Iiwib2JzZXJ2YWJsZXMiLCJ2YWx1ZVRyYW5zZm9ybSIsIm1heWJlU2NoZWR1bGUiLCJ2YWx1ZXMiLCJyZW1haW5pbmdGaXJzdFZhbHVlcyIsIl9sb29wXzEiLCJoYXNGaXJzdFZhbHVlIiwiY29tYmluZUxhdGVzdEluaXQiLCJjcmVhdGVPYmplY3QiLCJzdWJzY3JpcHRpb24iLCJjb3VudCIsInNlZW4iLCJkZWxheVdoZW4iLCJkZWxheUR1cmF0aW9uU2VsZWN0b3IiLCJzdWJzY3JpcHRpb25EZWxheSIsIm1hcFRvIiwiam9iIiwiY29tcGFueSIsIm1vbmV5IiwiY2hpbGQiLCJyZW1vdmVDaGlsZCIsInZpZXdVc2VyS29ua3VycyIsInNraWxscyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwicGFyc2UiLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJmZXRjaCIsInVzZXJLb25rdXJzVVJMIiwidG9Mb3dlckNhc2UiLCJtZXRob2QiLCJyZXNwb25zZSIsIm9rIiwianNvbiIsImRpdlVzZXJWaWV3S29ua3VycyIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJrb24iLCJkaXZLb25rdXJzIiwiam9iTGFiZWwiLCJpbm5lckhUTUwiLCJhcHBlbmRDaGlsZCIsImNvbXBhbnlMYWJlbCIsIm1vbmV5TGFiZWwiLCJidXR0b24iLCJ1c2VyIiwia29ua3VycyIsImJ1dHRvbktvbmt1cnMiLCJvbmNsaWNrIiwiZm9ybUJvZHkiLCJVUkxTZWFyY2hQYXJhbXMiLCJhcHBlbmQiLCJ1c2VyQ1YiLCJwcmlqYXZpTmFLb25rdXJzVVJMIiwiZW1haWwiLCJoZWFkZXJzIiwicG9zdFByaWphdmlTZU5hS29ua3VycyIsInZhbGlkIiwiYWxlcnQiLCJtc2ciLCJsb2NhdGlvbiIsInJlbG9hZCIsImRyYXdWaWV3S29ua3Vyc2UiLCJrb25rdXJzVVJMIiwibGFzdG5hbWUiLCJwYXNzd29yZCIsIkVudGl0eSIsInNldFVwTG9naW4iLCJVc2VyIiwicGFzc3dvcmQkIiwiZXZlbnQiLCJpbm5lclN1YnNjcmliZXIiLCJkdWUiLCJkdXJhdGlvbiIsImludGVydmFsT3JTY2hlZHVsZXIiLCJpbnRlcnZhbER1cmF0aW9uIiwiaXNOYU4iLCJ0aW1lciIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJkZXNjcmlwdGlvbiIsImNpdHkiLCJhZGRMaW5rVG9DbGFzc0VsZW1lbnQiLCJjbGFzc19lbGVtZW50IiwiaHJlZiIsImNsYXNzX25hbWUiLCJ0ZXh0IiwiaWRfdmFsdWUiLCJsaW5rIiwiZWxlbWVudCIsInJlbW92ZUxpbmtGcm9tQ2xhc3NFbGVtZW50IiwibGlua19ocmVmIiwidXNlckZpbHRlciIsImN1cnJlbnRVc2VyIiwiY3VycmVudFVzZXJMYWJlbCIsImtyZWlyYWpfbmFsb2ciLCJrb21wYW5pamEiLCJxdWVyeVNlbGVjdG9yQWxsIiwicGFyZW50X25vZGUiLCJzZWxlY3REaXYiLCJjaG9vc2VMYWJlbCIsImNob29zZVNlbGVjdCIsInNlbE9wdGlvbiIsInNlbGVjdGVkIiwiZGl2U2lnbnVwIiwib25jaGFuZ2UiLCJzZWxlY3RWYWx1ZSIsImRpdlNpZ251cExhYmVscyIsIm5hbWVMYWJlbCIsImxuYW1lTGFiZWwiLCJlbWFpbExhYmVsIiwicGFzc3dvcmRMYWJlbCIsInNraWxsc0xhYmVsIiwidXNlcmN2TGFiZWwiLCJkaXZTaWdudXBJbnB1dCIsIm5hbWVJbnB1dCIsInR5cGUiLCJsbmFtZUlucHV0IiwiZW1haWxJbnB1dCIsInBhc3N3b3JkSW5wdXQiLCJza2lsbHNJbnB1dCIsImN2SW5wdXQiLCJyb3dzIiwiY29scyIsImRyYXdTaWdudXBLb3Jpc25payIsImNpdHlMYWJlbCIsImRlc2NyaXB0aW9uTGFiZWwiLCJjaXR5SW5wdXQiLCJkZXNjcmlwdGlvbklucHV0IiwiZHJhd1NpZ251cEtvbXBhbmlqYSIsImRpdlNpZ251cEJ1dHRvbiIsImRyYXdTaWdudXAiLCJLb21wYW5pamEiLCJzZWxlY3RlZExhYmVsIiwicG9zdFVzZXIiLCJwb3N0TmV4dCIsInByaWphdmlfc2UiLCJkaXZMb2dpbiIsImRpdkxvZ2luTGFiZWxzIiwiZGl2TG9naW5JbnB1dCIsImRpdkxvZ2luQnV0dG9uIiwiZHJhd0xvZ2luIiwib2RqYXZpX3NlIiwicmVtb3ZlSXRlbSIsInByb2ZpbCIsImRpdlVzZXJQcm9maWxlIiwidXNlckluZm9OYXNsb3YiLCJkaXZVc2VyUHJvZmlsZUluZm8iLCJkaXZVc2VyUHJvZmlsZUluZm9EYXRhIiwiZGl2VXNlck5hbWUiLCJsYWJlbE5hbWUiLCJsYWJlbE5hbWVWYWx1ZSIsImRpdlVzZXJFbWFpbCIsImxhYmVsRW1haWwiLCJsYWJlbEVtYWlsVmFsdWUiLCJkaXZVc2VyU2tpbGxzIiwibGFiZWxTa2lsbHMiLCJsYWJlbFNraWxsc1ZhbHVlIiwiZGl2VXNlckNWIiwibGFiZWxDViIsImxhYmVsQ1ZWYWx1ZSIsImRyYXdLb3Jpc25pa1Byb2ZpbGUiLCJkaXZVc2VyQ2l0eSIsImxhYmVsQ2l0eSIsImxhYmVsQ2l0eVZhbHVlIiwiZGl2VXNlckRlc2NyaXB0aW9uIiwibGFiZWxEZXNjcmlwdGlvbiIsImxhYmVsRGVzY3JpcHRpb25WYWx1ZSIsImRyYXdLb21wYW5pamFQcm9maWxlIiwiZHJhd1VzZXJQcm9maWxlIiwibm92aUtvbmt1cnMiLCJkaXZOZXdLb25rdXJzIiwiZGl2Sm9iSW5wdXQiLCJqb2JJbnB1dCIsImRpdk1vbmV5SW5wdXQiLCJtb25leUlucHV0IiwiZGl2S29ua3Vyc0J1dHRvbiIsImtvbmt1cnNCdXR0b24iLCJkcmF3TmV3S29ua3VycyIsIm5ld0tvbmt1cnMiLCJLb25rdXJzIiwib25sb2FkIiwiY2hpbGRyZW4iLCJ0b2dnbGUiXSwic291cmNlUm9vdCI6IiJ9