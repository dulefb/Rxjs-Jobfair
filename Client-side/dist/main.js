(()=>{"use strict";var e=function(n,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},e(n,t)};function n(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function t(e,n){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(a=0)),a;)try{if(t=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=n.call(e,a)}catch(e){u=[6,e],r=0}finally{t=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function r(e){var n="function"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,o,i=t.call(e),a=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return a}function i(e,n,t){if(t||2===arguments.length)for(var r,o=0,i=n.length;o<i;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return e.concat(r||Array.prototype.slice.call(n))}function a(e){return this instanceof a?(this.v=e,this):new a(e)}function u(e){return"function"==typeof e}function c(e){var n=e((function(e){Error.call(e),e.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var l=c((function(e){return function(n){e(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(e,n){return n+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}));function s(e,n){if(e){var t=e.indexOf(n);0<=t&&e.splice(t,1)}}var d=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,n,t,a,c;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var d=r(s),p=d.next();!p.done;p=d.next())p.value.remove(this)}catch(n){e={error:n}}finally{try{p&&!p.done&&(n=d.return)&&n.call(d)}finally{if(e)throw e.error}}else s.remove(this);var f=this.initialTeardown;if(u(f))try{f()}catch(e){c=e instanceof l?e.errors:[e]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var m=r(v),y=m.next();!y.done;y=m.next()){var b=y.value;try{h(b)}catch(e){c=null!=c?c:[],e instanceof l?c=i(i([],o(c)),o(e.errors)):c.push(e)}}}catch(e){t={error:e}}finally{try{y&&!y.done&&(a=m.return)&&a.call(m)}finally{if(t)throw t.error}}}if(c)throw new l(c)}},e.prototype.add=function(n){var t;if(n&&n!==this)if(this.closed)h(n);else{if(n instanceof e){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(t=this._finalizers)&&void 0!==t?t:[]).push(n)}},e.prototype._hasParent=function(e){var n=this._parentage;return n===e||Array.isArray(n)&&n.includes(e)},e.prototype._addParent=function(e){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(e),n):n?[n,e]:e},e.prototype._removeParent=function(e){var n=this._parentage;n===e?this._parentage=null:Array.isArray(n)&&s(n,e)},e.prototype.remove=function(n){var t=this._finalizers;t&&s(t,n),n instanceof e&&n._removeParent(this)},e.EMPTY=((n=new e).closed=!0,n),e;var n}(),p=d.EMPTY;function f(e){return e instanceof d||e&&"closed"in e&&u(e.remove)&&u(e.add)&&u(e.unsubscribe)}function h(e){u(e)?e():e.unsubscribe()}var v={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},m={setTimeout:function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var a=m.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,i([e,n],o(t))):setTimeout.apply(void 0,i([e,n],o(t)))},clearTimeout:function(e){var n=m.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(e)},delegate:void 0};function y(e){m.setTimeout((function(){var n=v.onUnhandledError;if(!n)throw e;n(e)}))}function b(){}var w=S("C",void 0,void 0);function S(e,n,t){return{kind:e,value:n,error:t}}var g=null;function E(e){if(v.useDeprecatedSynchronousErrorHandling){var n=!g;if(n&&(g={errorThrown:!1,error:null}),e(),n){var t=g,r=t.errorThrown,o=t.error;if(g=null,r)throw o}}else e()}var C=function(e){function t(n){var t=e.call(this)||this;return t.isStopped=!1,n?(t.destination=n,f(n)&&n.add(t)):t.destination=x,t}return n(t,e),t.create=function(e,n,t){return new T(e,n,t)},t.prototype.next=function(e){this.isStopped?_(function(e){return S("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?_(S("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?_(w,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(d),L=Function.prototype.bind;function I(e,n){return L.call(e,n)}var k=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var n=this.partialObserver;if(n.next)try{n.next(e)}catch(e){O(e)}},e.prototype.error=function(e){var n=this.partialObserver;if(n.error)try{n.error(e)}catch(e){O(e)}else O(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){O(e)}},e}(),T=function(e){function t(n,t,r){var o,i,a=e.call(this)||this;return u(n)||!n?o={next:null!=n?n:void 0,error:null!=t?t:void 0,complete:null!=r?r:void 0}:a&&v.useDeprecatedNextContext?((i=Object.create(n)).unsubscribe=function(){return a.unsubscribe()},o={next:n.next&&I(n.next,i),error:n.error&&I(n.error,i),complete:n.complete&&I(n.complete,i)}):o=n,a.destination=new k(o),a}return n(t,e),t}(C);function O(e){var n;v.useDeprecatedSynchronousErrorHandling?(n=e,v.useDeprecatedSynchronousErrorHandling&&g&&(g.errorThrown=!0,g.error=n)):y(e)}function _(e,n){var t=v.onStoppedNotification;t&&m.setTimeout((function(){return t(e,n)}))}var x={closed:!0,next:b,error:function(e){throw e},complete:b},j="function"==typeof Symbol&&Symbol.observable||"@@observable";function M(e){return e}var P=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(n){var t=new e;return t.source=this,t.operator=n,t},e.prototype.subscribe=function(e,n,t){var r,o=this,i=(r=e)&&r instanceof C||function(e){return e&&u(e.next)&&u(e.error)&&u(e.complete)}(r)&&f(r)?e:new T(e,n,t);return E((function(){var e=o,n=e.operator,t=e.source;i.add(n?n.call(i,t):t?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(n){e.error(n)}},e.prototype.forEach=function(e,n){var t=this;return new(n=A(n))((function(n,r){var o=new T({next:function(n){try{e(n)}catch(e){r(e),o.unsubscribe()}},error:r,complete:n});t.subscribe(o)}))},e.prototype._subscribe=function(e){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(e)},e.prototype[j]=function(){return this},e.prototype.pipe=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return(0===(t=e).length?M:1===t.length?t[0]:function(e){return t.reduce((function(e,n){return n(e)}),e)})(this);var t},e.prototype.toPromise=function(e){var n=this;return new(e=A(e))((function(e,t){var r;n.subscribe((function(e){return r=e}),(function(e){return t(e)}),(function(){return e(r)}))}))},e.create=function(n){return new e(n)},e}();function A(e){var n;return null!==(n=null!=e?e:v.Promise)&&void 0!==n?n:Promise}var H=c((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),q=function(e){function t(){var n=e.call(this)||this;return n.closed=!1,n.currentObservers=null,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return n(t,e),t.prototype.lift=function(e){var n=new K(this,this);return n.operator=e,n},t.prototype._throwIfClosed=function(){if(this.closed)throw new H},t.prototype.next=function(e){var n=this;E((function(){var t,o;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var i=r(n.currentObservers),a=i.next();!a.done;a=i.next())a.value.next(e)}catch(e){t={error:e}}finally{try{a&&!a.done&&(o=i.return)&&o.call(i)}finally{if(t)throw t.error}}}}))},t.prototype.error=function(e){var n=this;E((function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=e;for(var t=n.observers;t.length;)t.shift().error(e)}}))},t.prototype.complete=function(){var e=this;E((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var n=e.observers;n.length;)n.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(n){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,n)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var n=this,t=this,r=t.hasError,o=t.isStopped,i=t.observers;return r||o?p:(this.currentObservers=null,i.push(e),new d((function(){n.currentObservers=null,s(i,e)})))},t.prototype._checkFinalizedStatuses=function(e){var n=this,t=n.hasError,r=n.thrownError,o=n.isStopped;t?e.error(r):o&&e.complete()},t.prototype.asObservable=function(){var e=new P;return e.source=this,e},t.create=function(e,n){return new K(e,n)},t}(P),K=function(e){function t(n,t){var r=e.call(this)||this;return r.destination=n,r.source=t,r}return n(t,e),t.prototype.next=function(e){var n,t;null===(t=null===(n=this.destination)||void 0===n?void 0:n.next)||void 0===t||t.call(n,e)},t.prototype.error=function(e){var n,t;null===(t=null===(n=this.destination)||void 0===n?void 0:n.error)||void 0===t||t.call(n,e)},t.prototype.complete=function(){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===n||n.call(e)},t.prototype._subscribe=function(e){var n,t;return null!==(t=null===(n=this.source)||void 0===n?void 0:n.subscribe(e))&&void 0!==t?t:p},t}(q),N=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function R(e){return u(null==e?void 0:e.then)}function J(e){return u(e[j])}function U(e){return Symbol.asyncIterator&&u(null==e?void 0:e[Symbol.asyncIterator])}function V(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var z="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function D(e){return u(null==e?void 0:e[z])}function G(e){return function(e,n,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=t.apply(e,n||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(e){o[e]&&(r[e]=function(n){return new Promise((function(t,r){i.push([e,n,t,r])>1||c(e,n)}))})}function c(e,n){try{(t=o[e](n)).value instanceof a?Promise.resolve(t.value.v).then(l,s):d(i[0][2],t)}catch(e){d(i[0][3],e)}var t}function l(e){c("next",e)}function s(e){c("throw",e)}function d(e,n){e(n),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var n,r,o;return t(this,(function(t){switch(t.label){case 0:n=e.getReader(),t.label=1;case 1:t.trys.push([1,,9,10]),t.label=2;case 2:return[4,a(n.read())];case 3:return r=t.sent(),o=r.value,r.done?[4,a(void 0)]:[3,5];case 4:return[2,t.sent()];case 5:return[4,a(o)];case 6:return[4,t.sent()];case 7:return t.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function B(e){return u(null==e?void 0:e.getReader)}function F(e){if(e instanceof P)return e;if(null!=e){if(J(e))return i=e,new P((function(e){var n=i[j]();if(u(n.subscribe))return n.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(N(e))return o=e,new P((function(e){for(var n=0;n<o.length&&!e.closed;n++)e.next(o[n]);e.complete()}));if(R(e))return t=e,new P((function(e){t.then((function(n){e.closed||(e.next(n),e.complete())}),(function(n){return e.error(n)})).then(null,y)}));if(U(e))return Y(e);if(D(e))return n=e,new P((function(e){var t,o;try{for(var i=r(n),a=i.next();!a.done;a=i.next()){var u=a.value;if(e.next(u),e.closed)return}}catch(e){t={error:e}}finally{try{a&&!a.done&&(o=i.return)&&o.call(i)}finally{if(t)throw t.error}}e.complete()}));if(B(e))return Y(G(e))}var n,t,o,i;throw V(e)}function Y(e){return new P((function(n){(function(e,n){var o,i,a,u,c,l,s,d;return c=this,l=void 0,d=function(){var c,l;return t(this,(function(t){switch(t.label){case 0:t.trys.push([0,5,6,11]),o=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,t=e[Symbol.asyncIterator];return t?t.call(e):(e=r(e),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(t){n[t]=e[t]&&function(n){return new Promise((function(r,o){!function(e,n,t,r){Promise.resolve(r).then((function(n){e({value:n,done:t})}),n)}(r,o,(n=e[t](n)).done,n.value)}))}}}(e),t.label=1;case 1:return[4,o.next()];case 2:if((i=t.sent()).done)return[3,4];if(c=i.value,n.next(c),n.closed)return[2];t.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=t.sent(),a={error:l},[3,11];case 6:return t.trys.push([6,,9,10]),i&&!i.done&&(u=o.return)?[4,u.call(o)]:[3,8];case 7:t.sent(),t.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,n){function t(e){try{o(d.next(e))}catch(e){n(e)}}function r(e){try{o(d.throw(e))}catch(e){n(e)}}function o(n){var o;n.done?e(n.value):(o=n.value,o instanceof s?o:new s((function(e){e(o)}))).then(t,r)}o((d=d.apply(c,l||[])).next())}))})(e,n).catch((function(e){return n.error(e)}))}))}function Q(e){return function(n){if(function(e){return u(null==e?void 0:e.lift)}(n))return n.lift((function(n){try{return e(n,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function W(e,n,t,r,o){return new X(e,n,t,r,o)}var X=function(e){function t(n,t,r,o,i,a){var u=e.call(this,n)||this;return u.onFinalize=i,u.shouldUnsubscribe=a,u._next=t?function(e){try{t(e)}catch(e){n.error(e)}}:e.prototype._next,u._error=o?function(e){try{o(e)}catch(e){n.error(e)}finally{this.unsubscribe()}}:e.prototype._error,u._complete=r?function(){try{r()}catch(e){n.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,u}return n(t,e),t.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var t=this.closed;e.prototype.unsubscribe.call(this),!t&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},t}(C);function Z(e,n){return Q((function(t,r){var o=0;t.subscribe(W(r,(function(t){r.next(e.call(n,t,o++))})))}))}function $(e,n,t,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=n.schedule((function(){t(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}function ee(e,n,t){return void 0===t&&(t=1/0),u(n)?ee((function(t,r){return Z((function(e,o){return n(t,e,r,o)}))(F(e(t,r)))}),t):("number"==typeof n&&(t=n),Q((function(n,r){return function(e,n,t,r,o,i,a,u){var c=[],l=0,s=0,d=!1,p=function(){!d||c.length||l||n.complete()},f=function(e){return l<r?h(e):c.push(e)},h=function(e){l++;var o=!1;F(t(e,s++)).subscribe(W(n,(function(e){n.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{l--;for(;c.length&&l<r;)e=void 0,e=c.shift(),h(e);p()}catch(e){n.error(e)}var e})))};return e.subscribe(W(n,f,(function(){d=!0,p()}))),function(){}}(n,r,e,t)})))}var ne=Array.isArray;function te(e){return Z((function(n){return function(e,n){return ne(n)?e.apply(void 0,i([],o(n))):e(n)}(e,n)}))}var re=["addListener","removeListener"],oe=["addEventListener","removeEventListener"],ie=["on","off"];function ae(e,n,t,r){if(u(t)&&(r=t,t=void 0),r)return ae(e,n,t).pipe(te(r));var i=o(function(e){return u(e.addEventListener)&&u(e.removeEventListener)}(e)?oe.map((function(r){return function(o){return e[r](n,o,t)}})):function(e){return u(e.addListener)&&u(e.removeListener)}(e)?re.map(ue(e,n)):function(e){return u(e.on)&&u(e.off)}(e)?ie.map(ue(e,n)):[],2),a=i[0],c=i[1];if(!a&&N(e))return ee((function(e){return ae(e,n,t)}))(F(e));if(!a)throw new TypeError("Invalid event target");return new P((function(e){var n=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return e.next(1<n.length?n:n[0])};return a(n),function(){return c(n)}}))}function ue(e,n){return function(t){return function(r){return e[t](n,r)}}}var ce=function(e){function t(n,t){return e.call(this)||this}return n(t,e),t.prototype.schedule=function(e,n){return void 0===n&&(n=0),this},t}(d),le={setInterval:function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var a=le.delegate;return(null==a?void 0:a.setInterval)?a.setInterval.apply(a,i([e,n],o(t))):setInterval.apply(void 0,i([e,n],o(t)))},clearInterval:function(e){var n=le.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(e)},delegate:void 0},se=function(e){function t(n,t){var r=e.call(this,n,t)||this;return r.scheduler=n,r.work=t,r.pending=!1,r}return n(t,e),t.prototype.schedule=function(e,n){var t;if(void 0===n&&(n=0),this.closed)return this;this.state=e;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,n)),this.pending=!0,this.delay=n,this.id=null!==(t=this.id)&&void 0!==t?t:this.requestAsyncId(o,this.id,n),this},t.prototype.requestAsyncId=function(e,n,t){return void 0===t&&(t=0),le.setInterval(e.flush.bind(e,this),t)},t.prototype.recycleAsyncId=function(e,n,t){if(void 0===t&&(t=0),null!=t&&this.delay===t&&!1===this.pending)return n;null!=n&&le.clearInterval(n)},t.prototype.execute=function(e,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(e,n);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,n){var t,r=!1;try{this.work(e)}catch(e){r=!0,t=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),t},t.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,t=this.scheduler,r=t.actions;this.work=this.state=this.scheduler=null,this.pending=!1,s(r,this),null!=n&&(this.id=this.recycleAsyncId(t,n,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(ce),de={now:function(){return(de.delegate||Date).now()},delegate:void 0},pe=function(){function e(n,t){void 0===t&&(t=e.now),this.schedulerActionCtor=n,this.now=t}return e.prototype.schedule=function(e,n,t){return void 0===n&&(n=0),new this.schedulerActionCtor(this,e).schedule(t,n)},e.now=de.now,e}(),fe=new(function(e){function t(n,t){void 0===t&&(t=pe.now);var r=e.call(this,n,t)||this;return r.actions=[],r._active=!1,r}return n(t,e),t.prototype.flush=function(e){var n=this.actions;if(this._active)n.push(e);else{var t;this._active=!0;do{if(t=e.execute(e.state,e.delay))break}while(e=n.shift());if(this._active=!1,t){for(;e=n.shift();)e.unsubscribe();throw t}}},t}(pe))(se),he=fe;function ve(e,n){return void 0===n&&(n=fe),Q((function(t,r){var o=null,i=null,a=null,u=function(){if(o){o.unsubscribe(),o=null;var e=i;i=null,r.next(e)}};function c(){var t=a+e,i=n.now();if(i<t)return o=this.schedule(void 0,t-i),void r.add(o);u()}t.subscribe(W(r,(function(t){i=t,a=n.now(),o||(o=n.schedule(c,e),r.add(o))}),(function(){u(),r.complete()}),void 0,(function(){i=o=null})))}))}var me=Array.isArray,ye=Object.getPrototypeOf,be=Object.prototype,we=Object.keys;function Se(e,n){return void 0===n&&(n=0),Q((function(t,r){t.subscribe(W(r,(function(t){return $(r,e,(function(){return r.next(t)}),n)}),(function(){return $(r,e,(function(){return r.complete()}),n)}),(function(t){return $(r,e,(function(){return r.error(t)}),n)})))}))}function ge(e,n){return void 0===n&&(n=0),Q((function(t,r){r.add(e.schedule((function(){return t.subscribe(r)}),n))}))}function Ee(e,n){if(!e)throw new Error("Iterable cannot be null");return new P((function(t){$(t,n,(function(){var r=e[Symbol.asyncIterator]();$(t,n,(function(){r.next().then((function(e){e.done?t.complete():t.next(e.value)}))}),0,!0)}))}))}function Ce(e,n){return n?function(e,n){if(null!=e){if(J(e))return function(e,n){return F(e).pipe(ge(n),Se(n))}(e,n);if(N(e))return function(e,n){return new P((function(t){var r=0;return n.schedule((function(){r===e.length?t.complete():(t.next(e[r++]),t.closed||this.schedule())}))}))}(e,n);if(R(e))return function(e,n){return F(e).pipe(ge(n),Se(n))}(e,n);if(U(e))return Ee(e,n);if(D(e))return function(e,n){return new P((function(t){var r;return $(t,n,(function(){r=e[z](),$(t,n,(function(){var e,n,o;try{n=(e=r.next()).value,o=e.done}catch(e){return void t.error(e)}o?t.complete():t.next(n)}),0,!0)})),function(){return u(null==r?void 0:r.return)&&r.return()}}))}(e,n);if(B(e))return function(e,n){return Ee(G(e),n)}(e,n)}throw V(e)}(e,n):F(e)}function Le(e){return e&&u(e.schedule)}function Ie(e){return e[e.length-1]}function ke(e){return Le(Ie(e))?e.pop():void 0}function Te(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var t=ke(e),r=function(e){return u(Ie(e))?e.pop():void 0}(e),o=function(e){if(1===e.length){var n=e[0];if(me(n))return{args:n,keys:null};if((r=n)&&"object"==typeof r&&ye(r)===be){var t=we(n);return{args:t.map((function(e){return n[e]})),keys:t}}}var r;return{args:e,keys:null}}(e),i=o.args,a=o.keys;if(0===i.length)return Ce([],t);var c=new P(function(e,n,t){return void 0===t&&(t=M),function(r){Oe(n,(function(){for(var o=e.length,i=new Array(o),a=o,u=o,c=function(o){Oe(n,(function(){var c=Ce(e[o],n),l=!1;c.subscribe(W(r,(function(e){i[o]=e,l||(l=!0,u--),u||r.next(t(i.slice()))}),(function(){--a||r.complete()})))}),r)},l=0;l<o;l++)c(l)}),r)}}(i,t,a?function(e){return function(e,n){return e.reduce((function(e,t,r){return e[t]=n[r],e}),{})}(a,e)}:M));return r?c.pipe(te(r)):c}function Oe(e,n,t){e?$(t,e,n):n()}var _e=new P((function(e){return e.complete()}));function xe(e){return e<=0?function(){return _e}:Q((function(n,t){var r=0;n.subscribe(W(t,(function(n){++r<=e&&(t.next(n),e<=r&&t.complete())})))}))}function je(e,n){return n?function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return(void 0===(t=1)&&(t=1/0),ee(M,t))(Ce(e,ke(e)));var t}(n.pipe(xe(1),Q((function(e,n){e.subscribe(W(n,b))}))),t.pipe(je(e)))}:ee((function(n,t){return F(e(n,t)).pipe(xe(1),function(e){return Z((function(){return e}))}(n))}))}var Me=function(){this.job=null,this.company=null,this.money=null};function Pe(e,n){null!==n&&n.forEach((function(n){e.removeChild(n)}))}function Ae(){var e,n=document.querySelector(".middle");console.log(JSON.parse(sessionStorage.getItem("current-user")).skills),(e=JSON.parse(sessionStorage.getItem("current-user")).skills,Ce(fetch(Ne+"?skills="+e.toLowerCase(),{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))).subscribe((function(e){!function(e,n){var t=document.createElement("div");t.classList.add("divUserViewKonkurs"),n.forEach((function(e){var n=document.createElement("div");n.classList.add("divKonkurs");var r=document.createElement("label");r.innerHTML="Posao: "+e.job,n.appendChild(r);var o=document.createElement("label");o.innerHTML="Kompanija: "+e.company,n.appendChild(o);var i=document.createElement("label");i.innerHTML="Plata: "+e.money,n.appendChild(i);var a,u,c,l=document.createElement("button");a=l,u=JSON.parse(sessionStorage.getItem("current-user")),c=e,a.onclick=function(){(function(e,n){var t=new URLSearchParams;return t.append("job",n.job),t.append("company",n.company),t.append("money",n.money),t.append("userCV",e.userCV),Ce(fetch(Re+"?email="+e.email,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:t}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))})(u,c).subscribe((function(e){e.valid?(alert(e.msg),document.location.reload()):alert(e.msg)}))},l.innerHTML="Prijavi se",n.appendChild(l),t.appendChild(n)})),e.appendChild(t)}(n,e)}))}function He(){var e,n=document.querySelector(".middle");console.log(JSON.parse(sessionStorage.getItem("current-user")).email),(e=JSON.parse(sessionStorage.getItem("current-user")).email,Ce(fetch(Ke+"?email="+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))).subscribe((function(e){!function(e,n){var t=document.createElement("div");t.classList.add("divKompanijaViewKonkurs"),n.forEach((function(e){var n=document.createElement("div");n.classList.add("divKonkurs");var r=document.createElement("label");r.innerHTML=e.korisnik.name+" "+e.korisnik.lastname,n.appendChild(r);var o=document.createElement("div");o.innerHTML=e.korisnik.userCV,n.appendChild(o);var i=document.createElement("label");i.innerHTML="Posao: "+e.konkurs.job,n.appendChild(i);var a=document.createElement("label");a.innerHTML="Kompanija: "+e.konkurs.company,n.appendChild(a);var u=document.createElement("label");u.innerHTML="Plata: "+e.konkurs.money,n.appendChild(u);var c,l,s,d=document.createElement("button");c=d,l=JSON.parse(sessionStorage.getItem("current-user")),s=e,c.onclick=function(){var e,n,t,r;(e=l.email,n=s.korisnik.email,t=s.konkurs,r=new URLSearchParams,r.append("job",t.job),r.append("company",t.company),r.append("money",t.money),Ce(fetch(Je+"?kompanijaEmail="+e+"&korisnikEmail="+n,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:r}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))).subscribe((function(e){e.valid?(alert(e.msg),document.location.reload()):alert(e.msg)}))},d.innerHTML="Prihvati",n.appendChild(d),t.appendChild(n)})),e.appendChild(t)}(n,e)}))}var qe="http://127.0.0.1:6500/user",Ke="http://127.0.0.1:6500/konkurs",Ne="http://127.0.0.1:6500/user-konkurs",Re="http://127.0.0.1:6500/prijavi-na-konkurs",Je="http://127.0.0.1:6500/prihvati-konkurs",Ue=function(e){this.label=e},Ve=function(){var e=function(n,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},e(n,t)};return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}(),ze=function(e){function n(){var n=e.call(this,"KORISNIK")||this;return n.name=null,n.lastname=null,n.email=null,n.password=null,n.skills=null,n.userCV=null,n}return Ve(n,e),n}(Ue);function De(){var e,n=new ze,t=ae(document.querySelector("#userPass"),"input").pipe(ve(200),Z((function(e){return e.target.value})));Te([ae(document.querySelector("#userEmail"),"input").pipe(ve(200),Z((function(e){return e.target.value}))),t]).subscribe((function(e){n.email=e[0],n.password=e[1]})),ae(document.querySelector("#btnLogin"),"click").pipe((e=function(){return e=n.email,t=n.password,Ce(fetch(qe+"?email="+e+"&password="+t,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})));var e,t},Q((function(n,t){var r=null,o=!1,i=function(){return o&&!r&&t.complete()};n.subscribe(W(t,(function(n){null==r||r.unsubscribe();0;F(e()).subscribe(r=W(t,(function(e){return t.next(e)}),(function(){r=null,i()})))}),(function(){o=!0,i()})))}))),function(e,n){void 0===n&&(n=fe);var t=function(e,n,t){void 0===e&&(e=0),void 0===t&&(t=he);var r=-1;return null!=n&&(Le(n)?t=n:r=n),new P((function(n){var o,i=(o=e)instanceof Date&&!isNaN(o)?+e-t.now():e;i<0&&(i=0);var a=0;return t.schedule((function(){n.closed||(n.next(a++),0<=r?this.schedule(void 0,r):n.complete())}),i)}))}(500,n);return je((function(){return t}))}()).subscribe((function(e){null===e?alert("Niste uneli ispravne podatke"):(sessionStorage.setItem("current-user",JSON.stringify(e)),sessionStorage.setItem("current-user-label",void 0===e.skills?"KOMPANIJA":"KORISNIK"),document.location.reload())}))}var Ge=function(){var e=function(n,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},e(n,t)};return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}(),Be=function(e){function n(){var n=e.call(this,"KOMPANIJA")||this;return n.name=null,n.description=null,n.city=null,n.email=null,n.password=null,n}return Ge(n,e),n}(Ue);function Fe(e,n,t,r,o){void 0===o&&(o=null);var i=document.createElement("a");i.href=n,i.classList.add(t),i.innerHTML=r;var a=document.querySelector(e);null!==i&&null!==a&&a.appendChild(i)}function Ye(e,n){var t=document.querySelector("a[href='"+n+"']"),r=document.querySelector(e);null!==t&&null!==r&&r.removeChild(t)}function Qe(){var e=JSON.parse(sessionStorage.getItem("current-user")),n=sessionStorage.getItem("current-user-label");null!==e?("KOMPANIJA"===n&&Fe(".header","#novi-konkurs","header-item","NOVI KONKURS"),Fe(".header","#profil","header-item","PROFIL"),Fe(".header","#odjavi-se","header-item","ODJAVI SE"),Ye(".header","#prijavi-se"),Ye(".header","#kreiraj-nalog")):(Fe(".header","#prijavi-se","header-item","PRIJAVI SE"),Fe(".header","#kreiraj-nalog","header-item","KREIRAJ NALOG"),Ye(".header","#profil"),Ye(".header","#odjavi-se"),void 0!==document.querySelector("a[href='#novi-konkurs']")&&Ye(".header","#novi-recept"));var t=document.querySelector("a[href='#kreiraj-nalog']");new q,null!==t&&t.addEventListener("click",(function(){var e,n;Pe(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var n=document.createElement("div");n.classList.add("selectDiv");var t=document.createElement("label");t.classList.add("chooseLabel"),t.innerHTML="Izaberite ulogu:",n.appendChild(t);var r=document.createElement("select");r.classList.add("chooseSelect"),r.id="chooseSelect";var o=document.createElement("option");o.innerHTML="",o.value="",o.selected=!0,r.appendChild(o),(o=document.createElement("option")).innerHTML="KORISNIK",o.value="KORISNIK",r.appendChild(o),(o=document.createElement("option")).innerHTML="KOMPANIJA",o.value="KOMPANIJA",r.appendChild(o),n.appendChild(r),e.appendChild(n);var i=document.createElement("div");i.classList.add("divSignup"),n.onchange=function(){var e=document.querySelector("#chooseSelect").value;Pe(document.querySelector(".divSignup"),document.querySelectorAll(".divSignup > div")),"KORISNIK"===e&&function(e){var n=document.createElement("div");n.classList.add("divSignupLabels");var t=document.createElement("label");t.innerHTML="Ime:",n.appendChild(t);var r=document.createElement("label");r.innerHTML="Prezime:",n.appendChild(r);var o=document.createElement("label");o.innerHTML="E-mail:",n.appendChild(o);var i=document.createElement("label");i.innerHTML="Lozinka:",n.appendChild(i);var a=document.createElement("label");a.innerHTML="Oblast rada:",n.appendChild(a);var u=document.createElement("label");u.innerHTML="Napisite vas CV:",n.appendChild(u),e.appendChild(n);var c=document.createElement("div");c.classList.add("divSignupInput");var l=document.createElement("input");l.id="signup-name",l.type="name",c.appendChild(l);var s=document.createElement("input");s.id="signup-lastname",s.type="name",c.appendChild(s);var d=document.createElement("input");d.id="signup-email",d.type="email",c.appendChild(d);var p=document.createElement("input");p.id="signup-password",p.type="password",c.appendChild(p);var f=document.createElement("input");f.id="signup-skills",f.type="name",c.appendChild(f);var h=document.createElement("textarea");h.id="signup-usercv",h.rows=12,h.cols=36,c.appendChild(h),e.appendChild(c)}(i),"KOMPANIJA"===e&&function(e){var n=document.createElement("div");n.classList.add("divSignupLabels");var t=document.createElement("label");t.innerHTML="Naziv:",n.appendChild(t);var r=document.createElement("label");r.innerHTML="Grad:",n.appendChild(r);var o=document.createElement("label");o.innerHTML="E-mail:",n.appendChild(o);var i=document.createElement("label");i.innerHTML="Lozinka:",n.appendChild(i);var a=document.createElement("label");a.innerHTML="Opisite kompaniju:",n.appendChild(a),e.appendChild(n);var u=document.createElement("div");u.classList.add("divSignupInput");var c=document.createElement("input");c.id="signup-name",c.type="name",u.appendChild(c);var l=document.createElement("input");l.id="signup-city",l.type="name",u.appendChild(l);var s=document.createElement("input");s.id="signup-email",s.type="email",u.appendChild(s);var d=document.createElement("input");d.id="signup-password",d.type="password",u.appendChild(d);var p=document.createElement("textarea");p.id="signup-description",p.rows=12,p.cols=36,u.appendChild(p),e.appendChild(u)}(i)},e.appendChild(i);var a=document.createElement("div");a.classList.add("divSignupButton");var u=document.createElement("button");u.classList.add("signupButton"),u.innerHTML="Kreiraj",a.appendChild(u),e.appendChild(a)}(document.querySelector(".middle")),e=new ze,n=new Be,document.querySelector(".signupButton").addEventListener("click",(function(){var t,r,o=document.querySelector("#chooseSelect").value;"KORISNIK"===o?(e.name=document.querySelector("#signup-name").value,e.lastname=document.querySelector("#signup-lastname").value,e.email=document.querySelector("#signup-email").value,e.password=document.querySelector("#signup-password").value,e.skills=document.querySelector("#signup-skills").value,e.userCV=document.querySelector("#signup-usercv").value):"KOMPANIJA"===o&&(n.name=document.querySelector("#signup-name").value,n.city=document.querySelector("#signup-city").value,n.email=document.querySelector("#signup-email").value,n.password=document.querySelector("#signup-password").value,n.description=document.querySelector("#signup-description").value),("KORISNIK"!==o||""!==e.name&&""!==e.email&&""!==e.password&&""!==e.skills&&""!==e.userCV)&&("KOMPANIJA"!==o||""!==n.name&&""!==n.city&&""!==n.description&&""!==n.email&&""!==n.password)?(t="KORISNIK"===o?e.email:n.email,r=o,Ce(fetch(qe+"?email="+t+"&label="+r,{method:"GET"}).then((function(e){return!!e.ok})).catch((function(e){return console.log(e)})))).subscribe((function(t){t?alert("Korisnik sa ovo email adresom vec postoji..."):function(e,n){var t=new URLSearchParams;return"KORISNIK"===n?(t.append("name",e.name),t.append("lastname",e.lastname),t.append("email",e.email),t.append("password",e.password),t.append("skills",e.skills),t.append("userCV",e.userCV)):(t.append("name",e.name),t.append("city",e.city),t.append("email",e.email),t.append("password",e.password),t.append("description",e.description)),Ce(fetch(qe+"?label="+n,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:t}).then((function(e){return!!e.ok})).catch((function(e){return console.log(e)})))}("KORISNIK"===o?e:n,o).subscribe((function(t){!1===t?alert("Doslo je do greske pokusajte ponovo."):(sessionStorage.setItem("current-user-label",o),sessionStorage.setItem("current-user","KORISNIK"===o?e.email:n.email),alert("Uspesno ste registrovani."),document.location.reload())}))})):alert("Morate da unesete sva polja...")}))}));var r=document.querySelector("a[href='#prijavi-se']");new q,null!==r&&r.addEventListener("click",(function(){Pe(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var n=document.createElement("div");n.classList.add("divLogin");var t=document.createElement("div");t.classList.add("divLoginLabels");var r=document.createElement("label");r.innerHTML="E-mail:",t.appendChild(r);var o=document.createElement("label");o.innerHTML="Password:",t.appendChild(o),n.appendChild(t);var i=document.createElement("div");i.classList.add("divLoginInput");var a=document.createElement("input");a.id="userEmail",a.type="email",i.appendChild(a);var u=document.createElement("input");u.id="userPass",u.type="password",i.appendChild(u),n.appendChild(i),e.appendChild(n);var c=document.createElement("div");c.classList.add("divLoginButton");var l=document.createElement("button");l.id="btnLogin",l.innerHTML="Uloguj se",c.appendChild(l),e.appendChild(c)}(document.querySelector(".middle")),De()}));var o=document.querySelector("a[href='#odjavi-se']");null!==o&&o.addEventListener("click",(function(){Pe(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),sessionStorage.removeItem("current-user"),document.location.reload()}));var i=document.querySelector("a[href='#profil']");null!==i&&(i.onclick=function(){!function(e){var n=document.querySelector(".middle"),t=document.createElement("div");t.classList.add("divUserProfile");var r=document.createElement("h2");r.classList.add("userInfoNaslov"),JSON.parse(sessionStorage.getItem("current-user")).email===e.email?r.innerHTML="Vas profil":r.innerHTML="Korisnik",t.appendChild(r);var o=document.createElement("div");o.classList.add("divUserProfileInfo"),"KORISNIK"===sessionStorage.getItem("current-user-label")?function(e,n){var t=document.createElement("div");t.classList.add("divUserProfileInfoData");var r=document.createElement("div"),o=document.createElement("label");o.classList.add("main-label"),o.innerHTML="Ime: ",r.appendChild(o);var i=document.createElement("div");i.innerHTML=n.name+" "+n.lastname,r.appendChild(i),t.appendChild(r);var a=document.createElement("div"),u=document.createElement("label");u.classList.add("main-label"),u.innerHTML="Email: ",a.appendChild(u);var c=document.createElement("div");c.innerHTML=n.email,a.appendChild(c),t.appendChild(a);var l=document.createElement("div"),s=document.createElement("label");s.classList.add("main-label"),s.innerHTML="Skills: ",l.appendChild(s);var d=document.createElement("div");d.innerHTML=n.skills,l.appendChild(d),t.appendChild(l);var p=document.createElement("div"),f=document.createElement("label");f.classList.add("main-label"),f.innerHTML="CV korisnika: ",p.appendChild(f);var h=document.createElement("div");h.innerHTML=n.userCV,p.appendChild(h),t.appendChild(p),e.appendChild(t)}(o,e):function(e,n){var t=document.createElement("div");t.classList.add("divUserProfileInfoData");var r=document.createElement("div"),o=document.createElement("label");o.classList.add("main-label"),o.innerHTML="Naziv: ",r.appendChild(o);var i=document.createElement("div");i.innerHTML=n.name,r.appendChild(i),t.appendChild(r);var a=document.createElement("div"),u=document.createElement("label");u.classList.add("main-label"),u.innerHTML="Email: ",a.appendChild(u);var c=document.createElement("div");c.innerHTML=n.email,a.appendChild(c),t.appendChild(a);var l=document.createElement("div"),s=document.createElement("label");s.classList.add("main-label"),s.innerHTML="Grad: ",l.appendChild(s);var d=document.createElement("div");d.innerHTML=n.city,l.appendChild(d),t.appendChild(l);var p=document.createElement("div"),f=document.createElement("label");f.classList.add("main-label"),f.innerHTML="Opis kompanije: ",p.appendChild(f);var h=document.createElement("div");h.innerHTML=n.description,p.appendChild(h),t.appendChild(p),e.appendChild(t)}(o,e),t.appendChild(o),n.appendChild(t)}(e)});var a=document.querySelector("a[href='#novi-konkurs']");null!==a&&(a.onclick=function(){Pe(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var n=document.createElement("div");n.classList.add("divNewKonkurs");var t=document.createElement("div");t.classList.add("divJobInput");var r=document.createElement("label");r.innerHTML="Posao: ",t.appendChild(r);var o=document.createElement("input");o.type="name",o.id="jobInput",t.appendChild(o),n.appendChild(t);var i=document.createElement("div");i.classList.add("divMoneyInput");var a=document.createElement("label");a.innerHTML="Plata: ",i.appendChild(a);var u=document.createElement("input");u.type="name",u.id="moneyInput",i.appendChild(u),n.appendChild(i);var c=document.createElement("div");c.classList.add("divKonkursButton");var l=document.createElement("button");l.innerHTML="Dodaj konkurs",l.id="newKonkursButton",c.appendChild(l),n.appendChild(c),e.appendChild(n)}(document.querySelector(".middle")),document.querySelector("#newKonkursButton").onclick=function(){var e,n,t=document.querySelector("#jobInput").value,r=document.querySelector("#moneyInput").value;if(console.log(t,r),""===t||""===r)alert("Unesite sva polja.");else{var o=new Me;o.job=t,o.money=r,o.company=JSON.parse(sessionStorage.getItem("current-user")).name,(e=o,n=new URLSearchParams,n.append("job",e.job),n.append("company",e.company),n.append("money",e.money),Ce(fetch(Ke,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:n}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))).subscribe((function(e){e.valid?(alert(e.msg),document.location.reload()):alert(e.msg)}))}}})}document.body.onload=function(){Qe(),"KORISNIK"===sessionStorage.getItem("current-user-label")?Ae():He(),document.querySelector("a[href='#pocetna']").addEventListener("click",(function(){document.location.reload()})),document.querySelector("a[href='#search-input']").onclick=function(){var e,n;document.querySelector("#search-bar-dropdown-show").classList.toggle("hideDisplay"),e=document.querySelector("#search-bar-dropdown-show"),(n=document.querySelectorAll(".divSearchSingleRecept")).length>0&&n.forEach((function(n){return e.removeChild(n)}))}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,